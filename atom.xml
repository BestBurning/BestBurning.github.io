<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>第一帅</title>
  
  <subtitle>Shea的博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://di1shuai.com/"/>
  <updated>2021-04-03T23:26:31.475Z</updated>
  <id>https://di1shuai.com/</id>
  
  <author>
    <name>Shea</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Flink-DataStream-Transformations</title>
    <link href="https://di1shuai.com/Flink%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2-Transformation.html"/>
    <id>https://di1shuai.com/Flink%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2-Transformation.html</id>
    <published>2020-12-26T15:50:04.000Z</published>
    <updated>2021-04-03T23:26:31.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DataStream-→-DataStream"><a href="#DataStream-→-DataStream" class="headerlink" title="DataStream → DataStream"></a>DataStream → DataStream</h2><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p>对每个成员进行操作</p><p><code>dataStream.map { x =&gt; x * 2 }</code></p><p>例如我们将测温枪数据流中的每一行转化为样例类</p><p>原始数据</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">id,时间戳,温度</span><br><span class="line"></span><br><span class="line">sensor_4,<span class="number">1609203345495</span>,<span class="number">39.126604003147314</span></span><br><span class="line">sensor_2,<span class="number">1609203345495</span>,<span class="number">39.42746976779783</span></span><br><span class="line">sensor_8,<span class="number">1609203345495</span>,<span class="number">38.573523839218375</span></span><br><span class="line">sensor_6,<span class="number">1609203345495</span>,<span class="number">37.65574402266021</span></span><br><span class="line">sensor_1,<span class="number">1609203345495</span>,<span class="number">35.97294873181826</span></span><br><span class="line">sensor_10,<span class="number">1609203345495</span>,<span class="number">35.11395246803552</span></span><br><span class="line">sensor_5,<span class="number">1609203345495</span>,<span class="number">37.17056374401738</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>样例类</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorReader</span>(<span class="params">id: <span class="type">String</span>, timestamp: <span class="type">Long</span>, temperature: <span class="type">Double</span></span>)</span></span><br></pre></td></tr></table></figure><p>map转化</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> dataStream = inputStream</span><br><span class="line">  .map(</span><br><span class="line">    data =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> array = data.split(<span class="string">","</span>)</span><br><span class="line">      <span class="type">SensorReader</span>(array(<span class="number">0</span>), array(<span class="number">1</span>).toLong, array(<span class="number">2</span>).toDouble)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h3 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h3><p>过滤</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">dataStream.filter &#123; _ != <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h3><p>压平</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">dataStream.flatMap &#123; str =&gt; str.split(<span class="string">" "</span>) &#125;</span><br></pre></td></tr></table></figure><h2 id="DataStream-→-DataStream-1"><a href="#DataStream-→-DataStream-1" class="headerlink" title="DataStream* → DataStream"></a>DataStream* → DataStream</h2><h3 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h3><p>合并多个流,要求数据格式一致</p><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">dataStream<span class="class">.<span class="keyword">union</span>(<span class="title">otherStream1</span>, <span class="title">otherStream2</span>, ...)</span></span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  Union 合并 必须同类型，但可以多个</span></span><br><span class="line"><span class="keyword">val</span> unionStream = highStream.union(normalStream)</span><br></pre></td></tr></table></figure><h2 id="DataStream-→-KeyedStream"><a href="#DataStream-→-KeyedStream" class="headerlink" title="DataStream → KeyedStream"></a>DataStream → KeyedStream</h2><h3 id="KeyBy"><a href="#KeyBy" class="headerlink" title="KeyBy"></a>KeyBy</h3><p>按照key来分组</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">// aggregation 分组聚合，计算每个传感器当前的最小温度</span></span><br><span class="line"><span class="keyword">val</span> aggStream = dataStream</span><br><span class="line">  .keyBy(_.id) <span class="comment">// 根据ID分组</span></span><br><span class="line">  <span class="comment">//      .min("temperature")    // 温度最小的一组数据</span></span><br><span class="line">  .minBy(<span class="string">"temperature"</span>) <span class="comment">//只保持温度最小,不影响时间的数据</span></span><br></pre></td></tr></table></figure><h2 id="KeyedStream-→-DataStream"><a href="#KeyedStream-→-DataStream" class="headerlink" title="KeyedStream → DataStream"></a>KeyedStream → DataStream</h2><h3 id="Aggregations"><a href="#Aggregations" class="headerlink" title="Aggregations"></a>Aggregations</h3><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">keyedStream</span><span class="selector-class">.sum</span>(<span class="number">0</span>)</span><br><span class="line"><span class="selector-tag">keyedStream</span><span class="selector-class">.sum</span>(<span class="string">"key"</span>)</span><br><span class="line"><span class="selector-tag">keyedStream</span><span class="selector-class">.min</span>(<span class="number">0</span>)</span><br><span class="line"><span class="selector-tag">keyedStream</span><span class="selector-class">.min</span>(<span class="string">"key"</span>)</span><br><span class="line"><span class="selector-tag">keyedStream</span><span class="selector-class">.max</span>(<span class="number">0</span>)</span><br><span class="line"><span class="selector-tag">keyedStream</span><span class="selector-class">.max</span>(<span class="string">"key"</span>)</span><br><span class="line"><span class="selector-tag">keyedStream</span><span class="selector-class">.minBy</span>(<span class="number">0</span>)</span><br><span class="line"><span class="selector-tag">keyedStream</span><span class="selector-class">.minBy</span>(<span class="string">"key"</span>)</span><br><span class="line"><span class="selector-tag">keyedStream</span><span class="selector-class">.maxBy</span>(<span class="number">0</span>)</span><br><span class="line"><span class="selector-tag">keyedStream</span><span class="selector-class">.maxBy</span>(<span class="string">"key"</span>)</span><br></pre></td></tr></table></figure><h2 id="DataStream-DataStream-→-ConnectedStreams"><a href="#DataStream-DataStream-→-ConnectedStreams" class="headerlink" title="DataStream,DataStream → ConnectedStreams"></a>DataStream,DataStream → ConnectedStreams</h2><h3 id="Connect"><a href="#Connect" class="headerlink" title="Connect"></a>Connect</h3><p>连接流，只能连接两个，但可以数据格式不同</p><figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">someStream : <span class="symbol">DataStream</span>[<span class="symbol">Int</span>] = ...</span><br><span class="line">otherStream : <span class="symbol">DataStream</span>[<span class="symbol">String</span>] = ...</span><br><span class="line">val connectedStreams = someStream.connect(otherStream)</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  Connect 合流 可以不同类型 但只能两个</span></span><br><span class="line"><span class="keyword">val</span> warnStream = highStream.map(data =&gt; (data.id, data.temperature))</span><br><span class="line"><span class="keyword">val</span> connectedStream = warnStream.connect(normalStream)</span><br><span class="line"><span class="keyword">val</span> coMapResultStream = connectedStream</span><br><span class="line">  .map(</span><br><span class="line">    warnData =&gt; (warnData._1, warnData._2, <span class="string">"warning"</span>),</span><br><span class="line">    normalData =&gt; (normalData.id, <span class="string">"healthy"</span>)</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h2 id="Side-Outputs"><a href="#Side-Outputs" class="headerlink" title="Side Outputs"></a>Side Outputs</h2><p>侧向输出用于分流</p><p>假定目前有一批测温枪的体温数据，按照温度分为37°以上的高温和37°以下的正常温度</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">    <span class="comment">// 实现分流，按温度&gt;37 和&lt;=37 分为高温、常温流</span></span><br><span class="line"><span class="keyword">val</span> highTag = <span class="type">OutputTag</span>[<span class="type">SensorReader</span>](<span class="string">"high-temperature"</span>)</span><br><span class="line"><span class="keyword">val</span> normalTag = <span class="type">OutputTag</span>[<span class="type">SensorReader</span>](<span class="string">"normal-temperature"</span>)</span><br><span class="line"><span class="comment">//  lambda</span></span><br><span class="line"><span class="keyword">val</span> allStream = dataStream.process(</span><br><span class="line">  (value, ctx: <span class="type">ProcessFunction</span>[<span class="type">SensorReader</span>, <span class="type">SensorReader</span>]#<span class="type">Context</span>, out: <span class="type">Collector</span>[<span class="type">SensorReader</span>]) =&gt; &#123;</span><br><span class="line">    out.collect(value) <span class="comment">//正常输出</span></span><br><span class="line">    <span class="keyword">if</span> (value.temperature &gt; <span class="number">37</span>) &#123;</span><br><span class="line">      ctx.output(highTag, value) <span class="comment">//输出为高温</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ctx.output(normalTag, value) <span class="comment">// 输出为常温</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">    <span class="keyword">val</span> highStream = allStream.getSideOutput(highTag)</span><br><span class="line"><span class="keyword">val</span> normalStream = allStream.getSideOutput(normalTag)</span><br><span class="line"></span><br><span class="line">    highStream.print(<span class="string">"high"</span>)</span><br><span class="line">normalStream.print(<span class="string">"normal"</span>)</span><br><span class="line">allStream.print(<span class="string">"all"</span>)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ci.apache.org/projects/flink/flink-docs-master/dev/stream/operators/" target="_blank" rel="noopener">Flink Operators</a><br><a href="https://ci.apache.org/projects/flink/flink-docs-master/dev/stream/side_output.html" target="_blank" rel="noopener">Flink Side Outputs</a></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码放在了<a href="https://github.com/BestBurning" target="_blank" rel="noopener">Github</a>上，见<a href="https://github.com/BestBurning/bigdata/blob/master/flink/flink-scala/src/main/scala/com/di1shuai/flink/scala/Transformations.scala" target="_blank" rel="noopener">flink-scala</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DataStream-→-DataStream&quot;&gt;&lt;a href=&quot;#DataStream-→-DataStream&quot; class=&quot;headerlink&quot; title=&quot;DataStream → DataStream&quot;&gt;&lt;/a&gt;DataStream → Data
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="BigData" scheme="https://di1shuai.com/tags/BigData/"/>
    
      <category term="Flink" scheme="https://di1shuai.com/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes架构</title>
    <link href="https://di1shuai.com/Kubernetes%E6%9E%B6%E6%9E%84.html"/>
    <id>https://di1shuai.com/Kubernetes%E6%9E%B6%E6%9E%84.html</id>
    <published>2020-12-08T15:35:05.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><blockquote><p>Kubernetes 是一个开源的容器编排引擎，用来对容器化应用进行自动化部署、扩缩和管理</p></blockquote><p>K8s → 使容器化应用部署更加简洁和高效</p><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>自动装箱</li><li>自动修复</li><li>水平扩展</li><li>滚动更新</li><li>版本回退</li><li>秘钥和配置管理</li><li>存储编排</li><li>批处理</li></ul><h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><img src="https://images.di1shuai.com/kubernetes.jpg" alt></p><p>分布式架构中的 Master - Node 模式</p><h2 id="Control-Plane-Components-控制平面组件"><a href="#Control-Plane-Components-控制平面组件" class="headerlink" title="Control Plane Components 控制平面组件"></a>Control Plane Components 控制平面组件</h2><p>控制平面的组件对集群做全局决策</p><ul><li>调度</li><li>检测和响应集群事件（例如，当不满足部署的 <code>replicas</code> 字段时，启动新的 <a href="https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/" target="_blank" rel="noopener"><code>pod</code></a>）。</li></ul><p>控制平面组件实际上也可以在任何节点上启动，也就是说可以在 <code>Node</code>节点上启动</p><h3 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a><strong>kube-apiserver</strong></h3><p>集群统一入口</p><h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a><strong>etcd</strong></h3><p>存储系统</p><h3 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a><strong>kube-scheduler</strong></h3><p>节点调度</p><p>调度决策考虑的因素包括 Pod 的</p><ul><li>资源需求</li><li>硬件/软件/策略约束</li><li>亲和性和反亲和性规范</li><li>数据位置</li><li>工作负载间的干扰</li><li>最后时限</li></ul><h3 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a><strong>kube-controller-manager</strong></h3><p>处理集群的后台任务</p><p>控制器包括:</p><ul><li>节点控制器（Node Controller）: 负责在节点出现故障时进行通知和响应。</li><li>副本控制器（Replication Controller）: 负责为系统中的每个副本控制器对象维护正确数量的 Pod。</li><li>端点控制器（Endpoints Controller）: 填充端点(Endpoints)对象(即加入 Service 与 Pod)。</li><li>服务帐户和令牌控制器（Service Account &amp; Token Controllers）: 为新的命名空间创建默认帐户和 API 访问令牌.</li></ul><h3 id="cloud-controller-manager"><a href="#cloud-controller-manager" class="headerlink" title="cloud-controller-manager"></a><strong>cloud-controller-manager</strong></h3><p>嵌入特定云的控制逻辑入口，链接聚合到云提供商的应用编程接口中， 并分离出相互作用的组件与我们的集群交互的组件</p><p>下面的控制器都包含对云平台驱动的依赖：</p><ul><li>节点控制器（Node Controller）: 用于在节点终止响应后检查云提供商以确定节点是否已被删除</li><li>路由控制器（Route Controller）: 用于在底层云基础架构中设置路由</li><li>服务控制器（Service Controller）: 用于创建、更新和删除云提供商负载均衡器</li></ul><h2 id="Node-组件"><a href="#Node-组件" class="headerlink" title="Node 组件"></a><strong>Node 组件</strong></h2><p>Node组件在每个节点上运行，维护运行的 Pod 并提供 Kubernetes 运行环境。</p><h3 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a><strong>kubelet</strong></h3><p>一个在集群中每个节点上运行的代理。 它保证容器都运行在 Pod 中。</p><p>kubelet 接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。 kubelet 不会管理不是由 Kubernetes 创建的容器。</p><h3 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a><strong>kube-proxy</strong></h3><p><a href="https://kubernetes.io/zh/docs/reference/command-line-tools-reference/kube-proxy/" target="_blank" rel="noopener">kube-proxy</a> 是集群中每个节点上运行的网络代理， 实现 Kubernetes <a href="https://kubernetes.io/zh/docs/concepts/services-networking/service/" target="_blank" rel="noopener">服务（Service）</a>概念的一部分。</p><p>kube-proxy 维护节点上的网络规则。这些网络规则允许从集群内部或外部的网络会话与 Pod 进行网络通信。</p><p>如果操作系统提供了数据包过滤层并可用的话，kube-proxy 会通过它来实现网络规则。否则， kube-proxy 仅转发流量本身。</p><h3 id="容器运行时（Container-Runtime）"><a href="#容器运行时（Container-Runtime）" class="headerlink" title="容器运行时（Container Runtime）"></a><strong>容器运行时（Container Runtime）</strong></h3><p>容器运行环境是负责运行容器的软件。</p><p>Kubernetes 支持多个容器运行环境: <a href="https://kubernetes.io/zh/docs/reference/kubectl/docker-cli-to-kubectl/" target="_blank" rel="noopener">Docker</a>、 <a href="https://containerd.io/docs/" target="_blank" rel="noopener">containerd</a>、<a href="https://cri-o.io/#what-is-cri-o" target="_blank" rel="noopener">CRI-O</a> 以及任何实现 <a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-node/container-runtime-interface.md" target="_blank" rel="noopener">Kubernetes CRI (容器运行环境接口)</a>。</p><h2 id="Addons-插件"><a href="#Addons-插件" class="headerlink" title="Addons 插件"></a><strong>Addons 插件</strong></h2><p>插件使用 Kubernetes 资源（<a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/daemonset/" target="_blank" rel="noopener">DaemonSet</a>、 <a href="https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/" target="_blank" rel="noopener">Deployment</a>等）实现集群功能。 因为这些插件提供集群级别的功能，插件中命名空间域的资源属于 <code>kube-system</code> 命名空间。</p><p>下面描述众多插件中的几种。有关可用插件的完整列表，请参见 <a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/addons/" target="_blank" rel="noopener">插件（Addons）</a>。</p><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a><strong>DNS</strong></h3><p>尽管其他插件都并非严格意义上的必需组件，但几乎所有 Kubernetes 集群都应该 有<a href="https://kubernetes.io/zh/docs/concepts/services-networking/dns-pod-service/" target="_blank" rel="noopener">集群 DNS</a>， 因为很多示例都需要 DNS 服务。</p><p>集群 DNS 是一个 DNS 服务器，和环境中的其他 DNS 服务器一起工作，它为 Kubernetes 服务提供 DNS 记录。</p><p>Kubernetes 启动的容器自动将此 DNS 服务器包含在其 DNS 搜索列表中。</p><h3 id="Web-界面（仪表盘）"><a href="#Web-界面（仪表盘）" class="headerlink" title="Web 界面（仪表盘）"></a><strong>Web 界面（仪表盘）</strong></h3><p><a href="https://kubernetes.io/zh/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noopener">Dashboard</a> 是Kubernetes 集群的通用的、基于 Web 的用户界面。 它使用户可以管理集群中运行的应用程序以及集群本身并进行故障排除。</p><h3 id="容器资源监控"><a href="#容器资源监控" class="headerlink" title="容器资源监控"></a><strong>容器资源监控</strong></h3><p><a href="https://kubernetes.io/zh/docs/tasks/debug-application-cluster/resource-usage-monitoring/" target="_blank" rel="noopener">容器资源监控</a> 将关于容器的一些常见的时间序列度量值保存到一个集中的数据库中，并提供用于浏览这些数据的界面。</p><h3 id="集群层面日志"><a href="#集群层面日志" class="headerlink" title="集群层面日志"></a><strong>集群层面日志</strong></h3><p><a href="https://kubernetes.io/zh/docs/concepts/cluster-administration/logging/" target="_blank" rel="noopener">集群层面日志</a> 机制负责将容器的日志数据 保存到一个集中的日志存储中，该存储能够提供搜索和浏览接口。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://kubernetes.io/zh/docs/concepts/overview/components/#control-plane-components" target="_blank" rel="noopener">Kubernetes 组件</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Kubernetes 是一个开源的容器编排引擎，用来对容器化应用进行自动化部署、扩缩和管理&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="Kubernetes" scheme="https://di1shuai.com/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>使用GithubAction推送Docker到香港华为镜像中心</title>
    <link href="https://di1shuai.com/%E4%BD%BF%E7%94%A8GithubAction%E6%8E%A8%E9%80%81Docker%E5%88%B0%E5%8D%8E%E4%B8%BA%E9%95%9C%E5%83%8F%E4%B8%AD%E5%BF%83.html"/>
    <id>https://di1shuai.com/%E4%BD%BF%E7%94%A8GithubAction%E6%8E%A8%E9%80%81Docker%E5%88%B0%E5%8D%8E%E4%B8%BA%E9%95%9C%E5%83%8F%E4%B8%AD%E5%BF%83.html</id>
    <published>2020-11-21T08:40:51.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<p>这次的<code>CI</code>目标是使用<code>GithubAction</code>构建Docker并推至自己的服务器运行</p><p>具体过程如下<br><code>Java</code>项目<code>Push</code>新标签的时候，触发<code>Github Action</code>构建<code>jar</code>与<code>Docker</code>，并推送至<a href="https://www.huaweicloud.com/product/swr.html?fromacct=cb4bb004-b347-4a92-97af-77d47099a091&utm_source=V1g3MDY4NTY=&utm_medium=cps&utm_campaign=201905" target="_blank" rel="noopener">香港华为镜像中心</a>，之后从自己服务器<code>Pull</code>并运行。<br><img src="https://images.di1shuai.com/Fowol7SghHczOY-Xx8mrjS90fRWN" alt></p><p>那么为什么要使用<a href="https://www.huaweicloud.com/product/swr.html?fromacct=cb4bb004-b347-4a92-97af-77d47099a091&utm_source=V1g3MDY4NTY=&utm_medium=cps&utm_campaign=201905" target="_blank" rel="noopener">香港华为镜像中心</a>呢？</p><p><img src="https://images.di1shuai.com/Fiba8IkZK09g3ERJCRW1FP34YmR_" alt></p><p>当然是因为 <del>它免费</del> <strong>穷</strong>啊，<br>另一个原因就是使用香港的镜像中心<strong>速度</strong>体验非常好，从<code>GithubAction</code>推一个100多M的镜像只用<code>34s</code></p><p><img src="https://images.di1shuai.com/FkVj-c1gISJspivwkbSoXeTHuSFW" alt></p><h3 id="Dockerfile配置"><a href="#Dockerfile配置" class="headerlink" title="Dockerfile配置"></a><code>Dockerfile</code>配置</h3><p>注意<code>Dockerfile</code>文件的路径与<code>Pom</code>平级</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jre</span><br><span class="line"><span class="keyword">MAINTAINER</span> Shea&lt;zhushuai026@gmail.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ARG</span> JAR_FILE</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> target/<span class="variable">$&#123;JAR_FILE&#125;</span> /root/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"sh"</span>, <span class="string">"-c"</span>, <span class="string">"java <span class="variable">$&#123;JAVA_OPTS&#125;</span> -jar /root/app.jar"</span>]</span></span><br></pre></td></tr></table></figure><h3 id="Pom配置"><a href="#Pom配置" class="headerlink" title="Pom配置"></a><code>Pom</code>配置</h3><p>使用<code>dockerfile-maven-plugin</code>插件可以直接<code>mvn package</code>打出<code>Docker Image</code></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="comment">&lt;!-- 指定该Main Class为全局的唯一入口 --&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.di1shuai.questionbank.CmbQuestionBankApiApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">layout</span>&gt;</span>ZIP<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                           <span class="comment">&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dockerfile-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">id</span>&gt;</span>default<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>push<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">goal</span>&gt;</span>tag<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">repository</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">tag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">JAR_FILE</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">JAR_FILE</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">buildArgs</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Github-Repository配置"><a href="#Github-Repository配置" class="headerlink" title="Github Repository配置"></a><code>Github Repository</code>配置</h3><p>在<code>Seetings</code> -&gt; <code>Secrets</code>进行配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DOCKER_ORGANIZTION  # 华为镜像中的组织 e.g. di1shuai</span><br><span class="line">DOCKER_PASSWORD     # 华为云AK与SK</span><br><span class="line">DOCKER_REGION       # 所属区域 e.g. ap-southeast-1</span><br><span class="line">DOCKER_REGISTRY     # 镜像中心 e.g. swr.ap-southeast-1.myhuaweicloud.com</span><br><span class="line">DOCKER_USERNAME     # 华为云AK</span><br><span class="line">HOST                # 部署服务器Host e.g. 111.111.111.111 or xxxxx.di1shuai.com</span><br><span class="line">PORT                # 部署服务器端口 e.g. 22</span><br><span class="line">PWD                 # 部署服务器密码 e.g. HelloWorld123</span><br><span class="line">USER                # 部署服务器账号 e.g. tom</span><br></pre></td></tr></table></figure><p>其中<code>DOCKER_USERNAME</code>与<code>DOCKER_PASSWORD</code>的值需要去<a href="https://www.huaweicloud.com/product/swr.html?fromacct=cb4bb004-b347-4a92-97af-77d47099a091&utm_source=V1g3MDY4NTY=&utm_medium=cps&utm_campaign=201905" target="_blank" rel="noopener">华为云官网</a></p><p>账号 -&gt; 我的凭证 -&gt; 访问秘钥 -&gt; 新增访问秘钥 -&gt; 获得<code>AK</code>和<code>SK</code></p><ol><li><p><code>DOCKER_USERNAME</code>=<code>AK</code></p></li><li><p><code>DOCKER_PASSWORD</code>需要在<code>Linux/Macos</code>机器上运行</p></li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">printf</span> <span class="string">"<span class="variable">$AK</span>"</span> | openssl dgst -binary -sha256 -hmac <span class="string">"<span class="variable">$SK</span>"</span> | od -An -vtx1 | sed <span class="string">'s/[ \n]//g'</span> | sed <span class="string">'N;s/\n//'</span></span><br></pre></td></tr></table></figure><p>将<code>$AK</code>与<code>$SK</code>替换为刚刚拿到的<code>AK</code>和<code>SK</code></p><h3 id="Action配置"><a href="#Action配置" class="headerlink" title="Action配置"></a><code>Action</code>配置</h3><p>路径： <code>.github/workflows/maven.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Java</span> <span class="string">Deploy</span> <span class="string">with</span> <span class="string">Maven</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">create:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">v*</span></span><br><span class="line">    <span class="attr">branches:</span> <span class="string">[master]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">DOCKER_PROJECT:</span> <span class="string">cmb-question-bank-api</span> </span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">11</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-java@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="number">11</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Maven</span> <span class="string">packages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">~/.m2</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-m2-$&#123;&#123;</span> <span class="string">hashFiles('**/pom.xml')</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">restore-keys:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-m2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Maven</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">mvn</span> <span class="string">package</span> <span class="string">-Dmaven.test.skip=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Init</span> <span class="string">Env</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"DOCKER_VERSION=`docker images | grep $DOCKER_PROJECT | awk 'NR==1 &#123;print $2&#125;'`"</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"DOCKER_IMAGE_NAME=$<span class="template-variable">&#123;&#123;secrets.DOCKER_REGISTRY&#125;&#125;</span>/$<span class="template-variable">&#123;&#123;secrets.DOCKER_ORGANIZTION&#125;&#125;</span>/$DOCKER_PROJECT"</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">Docker</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">$&#123;&#123;secrets.DOCKER_REGION&#125;&#125;@$&#123;&#123;secrets.DOCKER_USERNAME&#125;&#125;</span> <span class="string">-p</span> <span class="string">$&#123;&#123;secrets.DOCKER_PASSWORD&#125;&#125;</span> <span class="string">$&#123;&#123;secrets.DOCKER_REGISTRY&#125;&#125;</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">images</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">tag</span> <span class="string">$DOCKER_PROJECT:$DOCKER_VERSION</span> <span class="string">$DOCKER_IMAGE_NAME:$DOCKER_VERSION</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">tag</span> <span class="string">$DOCKER_IMAGE_NAME:$DOCKER_VERSION</span> <span class="string">$DOCKER_IMAGE_NAME:latest</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">images</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">push</span> <span class="string">$DOCKER_IMAGE_NAME:$DOCKER_VERSION</span></span><br><span class="line">          <span class="string">docker</span> <span class="string">push</span> <span class="string">$DOCKER_IMAGE_NAME:latest</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">pull-docker:</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">DOCKER_PROJECT:</span> <span class="string">cmb-question-bank-api</span>   </span><br><span class="line">    <span class="attr">needs:</span> <span class="string">[build]</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Pull</span> <span class="string">Docker</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Init</span> <span class="string">Env</span> </span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"DOCKER_VERSION=`docker images | grep $DOCKER_PROJECT | awk 'NR==1 &#123;print $2&#125;'`"</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"DOCKER_IMAGE_NAME=$<span class="template-variable">&#123;&#123;secrets.DOCKER_REGISTRY&#125;&#125;</span>/$<span class="template-variable">&#123;&#123;secrets.DOCKER_ORGANIZTION&#125;&#125;</span>/$DOCKER_PROJECT"</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">appleboy/ssh-action@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">host:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HOST</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.USER</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PWD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">port:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PORT</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">envs:</span> <span class="string">DOCKER_IMAGE_NAME,DOCKER_PROJECT</span></span><br><span class="line">          <span class="attr">script:</span> <span class="string">|</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">stop</span> <span class="string">$(docker</span> <span class="string">ps</span> <span class="string">--filter</span> <span class="string">ancestor=$DOCKER_IMAGE_NAME</span> <span class="string">-q)</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">$(docker</span> <span class="string">ps</span> <span class="string">-a</span> <span class="string">--filter</span> <span class="string">ancestor=$DOCKER_IMAGE_NAME:latest</span> <span class="string">-q)</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">rmi</span> <span class="string">-f</span> <span class="string">$(docker</span> <span class="string">images</span>  <span class="string">$DOCKER_IMAGE_NAME:latest</span> <span class="string">-q)</span></span><br><span class="line">            <span class="string">docker</span> <span class="string">pull</span> <span class="string">$DOCKER_IMAGE_NAME:latest</span></span><br><span class="line">            <span class="string">cd</span> <span class="string">/opt/apps/</span></span><br><span class="line">            <span class="string">docker-compose</span> <span class="string">up</span> <span class="string">-d</span></span><br></pre></td></tr></table></figure><p>其中<code>DOCKER_PROJECT: cmb-question-bank-api</code>替换为你自己的项目名</p><h3 id="推送一个新标签"><a href="#推送一个新标签" class="headerlink" title="推送一个新标签"></a>推送一个新标签</h3><p><code>Git</code>推送一个<code>v1.0.0</code>到Github</p><p><img src="https://images.di1shuai.com/FtBphMALiRu8H1oivWQsIHdiW819" alt></p><p>整个构建过程大约花费<code>两分半</code>,还不要钱！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这次的&lt;code&gt;CI&lt;/code&gt;目标是使用&lt;code&gt;GithubAction&lt;/code&gt;构建Docker并推至自己的服务器运行&lt;/p&gt;
&lt;p&gt;具体过程如下&lt;br&gt;&lt;code&gt;Java&lt;/code&gt;项目&lt;code&gt;Push&lt;/code&gt;新标签的时候，触发&lt;code&gt;G
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="Docker" scheme="https://di1shuai.com/tags/Docker/"/>
    
      <category term="Github" scheme="https://di1shuai.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose安装单机Elasticsearch</title>
    <link href="https://di1shuai.com/docker-compose%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BAElasticsearch.html"/>
    <id>https://di1shuai.com/docker-compose%E5%AE%89%E8%A3%85%E5%8D%95%E6%9C%BAElasticsearch.html</id>
    <published>2020-11-20T08:40:51.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>docker-compose</code>安装<code>Elasticsearch</code> <code>7.9.3</code></p><h3 id="确认docker-compose已经安装"><a href="#确认docker-compose已经安装" class="headerlink" title="确认docker-compose已经安装"></a>确认<code>docker-compose</code>已经安装</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">elasticsearch-docker</span> <span class="string">docker-compose</span> <span class="string">version</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">docker-compose</span> <span class="string">version</span> <span class="number">1.27</span><span class="number">.4</span><span class="string">,</span> <span class="string">build</span> <span class="number">40524192</span></span><br><span class="line"><span class="attr">docker-py version:</span> <span class="number">4.3</span><span class="number">.1</span></span><br><span class="line"><span class="attr">CPython version:</span> <span class="number">3.7</span><span class="number">.7</span></span><br><span class="line"><span class="attr">OpenSSL version:</span> <span class="string">OpenSSL</span> <span class="number">1.1</span><span class="string">.1g</span>  <span class="number">21</span> <span class="string">Apr</span> <span class="number">2020</span></span><br></pre></td></tr></table></figure><h3 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">elasticsearch:7.9.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">elasticsearch7.9.3</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">bootstrap.memory_lock=true</span>   <span class="comment"># 内存交换的选项，官网建议为true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"ES_JAVA_OPTS=-Xms256m -Xmx256m"</span> <span class="comment"># 设置内存，如内存不足，可以尝试调低点</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">discovery.type=single-node</span>      <span class="comment"># 是否启用单节点模式</span></span><br><span class="line">    <span class="attr">ulimits:</span>        <span class="comment"># 栈内存的上限</span></span><br><span class="line">      <span class="attr">memlock:</span></span><br><span class="line">        <span class="attr">soft:</span> <span class="number">-1</span>    <span class="comment"># 不限制</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">-1</span>    <span class="comment"># 不限制</span></span><br><span class="line">    <span class="comment"># volumes:</span></span><br><span class="line">    <span class="comment">#  - ~/top/data/elasticsearch/config:/usr/share/elasticsearch/config</span></span><br><span class="line">    <span class="comment">#  - ~/top/data/elasticsearch/data:/usr/share/elasticsearch/data</span></span><br><span class="line">    <span class="comment">#  - ~/top/data/elasticsearch/logs:/usr/share/elasticsearch/logs</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9200</span><span class="string">:9200</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9300</span><span class="string">:9300</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="attr">kibana:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">kibana:7.9.3</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kibana7.9.3</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch.hosts=http://elasticsearch:9200</span></span><br><span class="line">    <span class="attr">hostname:</span> <span class="string">kibana</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">elasticsearch</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5601</span><span class="string">:5601</span></span><br><span class="line"></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="attr">esdata:</span></span><br><span class="line">    <span class="attr">driver:</span> <span class="string">local</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure><h3 id="将容器内的config配置文件复制到需要挂载的目录"><a href="#将容器内的config配置文件复制到需要挂载的目录" class="headerlink" title="将容器内的config配置文件复制到需要挂载的目录"></a>将容器内的<code>config</code>配置文件复制到需要挂载的目录</h3><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">docker cp elasticsearch7.<span class="number">9.3</span><span class="symbol">:/usr/share/elasticsearch/config</span> ~<span class="regexp">/top/data</span><span class="regexp">/elasticsearch/</span></span><br></pre></td></tr></table></figure><h3 id="删除刚刚创建好的容器"><a href="#删除刚刚创建好的容器" class="headerlink" title="删除刚刚创建好的容器"></a>删除刚刚创建好的容器</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">docker</span> <span class="selector-tag">rm</span> <span class="selector-tag">elasticsearch7</span><span class="selector-class">.9</span><span class="selector-class">.3</span> <span class="selector-tag">kibana7</span><span class="selector-class">.9</span><span class="selector-class">.3</span></span><br></pre></td></tr></table></figure><h3 id="打开docker-compose-yml中挂载目录的注释"><a href="#打开docker-compose-yml中挂载目录的注释" class="headerlink" title="打开docker-compose.yml中挂载目录的注释"></a>打开<code>docker-compose.yml</code>中挂载目录的注释</h3><figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">volumes:</span><br><span class="line">  -<span class="ruby"> ~<span class="regexp">/top/data</span><span class="regexp">/elasticsearch/config</span><span class="symbol">:/usr/share/elasticsearch/config</span></span></span><br><span class="line"><span class="ruby">  - ~<span class="regexp">/top/data</span><span class="regexp">/elasticsearch/data</span><span class="symbol">:/usr/share/elasticsearch/data</span></span></span><br><span class="line"><span class="ruby">  - ~<span class="regexp">/top/data</span><span class="regexp">/elasticsearch/logs</span><span class="symbol">:/usr/share/elasticsearch/logs</span></span></span><br></pre></td></tr></table></figure><h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker-compose up -d</span></span><br></pre></td></tr></table></figure><h3 id="运行成功"><a href="#运行成功" class="headerlink" title="运行成功"></a>运行成功</h3><p>Elasticsearch: 访问<code>9200</code>端口<br>Kibana: 访问<code>5601</code>端口</p><h3 id="安装ik分词插件"><a href="#安装ik分词插件" class="headerlink" title="安装ik分词插件"></a>安装<code>ik</code>分词插件</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">docker-compose exec elasticsearch elasticsearch-plugin install https:<span class="regexp">//gi</span>thub.com<span class="regexp">/medcl/</span>elasticsearch-analysis-ik<span class="regexp">/releases/</span>download<span class="regexp">/v7.9.3/</span>elasticsearch-analysis-ik-<span class="number">7.9</span>.<span class="number">3</span>.zip</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>然后要重启es容器</span><br><span class="line">docker-compose restart elasticsearch</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用&lt;code&gt;docker-compose&lt;/code&gt;安装&lt;code&gt;Elasticsearch&lt;/code&gt; &lt;code&gt;7.9.3&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;确认docker-compose已经安装&quot;&gt;&lt;a href=&quot;#确认docker-compose
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="Docker" scheme="https://di1shuai.com/tags/Docker/"/>
    
      <category term="Elasticsearch" scheme="https://di1shuai.com/tags/Elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>使用GithubAction发布Flutter项目-Android</title>
    <link href="https://di1shuai.com/%E4%BD%BF%E7%94%A8GithubAction%E5%8F%91%E5%B8%83Flutter%E9%A1%B9%E7%9B%AE.html"/>
    <id>https://di1shuai.com/%E4%BD%BF%E7%94%A8GithubAction%E5%8F%91%E5%B8%83Flutter%E9%A1%B9%E7%9B%AE.html</id>
    <published>2020-11-01T08:40:51.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<p><code>CI</code>目标: 使用<code>GithubAction</code>发布<code>Flutter</code>项目</p><ul><li><code>Android</code> - <code>PlayStore</code>/<code>GithubRelease</code></li><li><code>IOS</code> - <code>AppStore</code></li><li><code>Macos</code> - <code>GithubRelease</code></li><li><code>Linux</code> - <code>GithubRelease</code></li><li><code>Windows</code> - <code>GithubRelease</code></li></ul><p><img src="https://images.di1shuai.com/flutter_ci.jpg" alt></p><p>那就先来看看如何<code>CI</code>发布<code>Flutter</code>-<code>Android</code>吧</p><h2 id="Android-本地"><a href="#Android-本地" class="headerlink" title="Android - 本地"></a>Android - 本地</h2><h3 id="App-Logo-修改"><a href="#App-Logo-修改" class="headerlink" title="App Logo 修改"></a>App Logo 修改</h3><ol><li>修改<code>pubspec.yaml</code>下的:</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">flutter_launcher_icons:</span> <span class="string">^0.8.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">flutter_icons:</span></span><br><span class="line">  <span class="attr">android:</span> <span class="string">"launcher_icon"</span></span><br><span class="line">  <span class="attr">ios:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">image_path:</span> <span class="string">"assets/logo/logo.png"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>运行</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter pub get</span><br><span class="line">flutter pub run flutter_launcher_icons:main</span><br></pre></td></tr></table></figure><h3 id="App-Name-修改"><a href="#App-Name-修改" class="headerlink" title="App Name 修改"></a>App Name 修改</h3><ol><li>修改<code>pubspec.yaml</code>下的:</li></ol><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dev_dependencies:</span></span><br><span class="line">  <span class="attr">flutter_launcher_name:</span> <span class="string">^0.0.1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">flutter_launcher_name:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">"APPName"</span></span><br></pre></td></tr></table></figure><ol start="2"><li>运行</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter pub get</span><br><span class="line">flutter pub run flutter_launcher_name:main</span><br></pre></td></tr></table></figure><p>Check</p><p><code>Android</code> - <code>android/app/src/main/AndroidManifest.xml</code></p><p><code>IOS</code> - <code>ios/Runner/Info.plist</code></p><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>文件路径 : <code>android/app/src/main/AndroidManifest.xml</code></p><p><code>manifest</code>之后加入<code>uses-permission</code>标签，e.g.</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">package</span>=<span class="string">"com.di1shuai.xxx"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>具体权限名称参考 <a href="https://developer.android.com/reference/android/Manifest.permission?hl=zh-cn" target="_blank" rel="noopener">Manifest.permission</a></p><h3 id="签名"><a href="#签名" class="headerlink" title="签名"></a>签名</h3><ol><li>创建<code>key.jks</code>,已有可忽略</li></ol><ul><li>Mac/Linux</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -genkey -v -keystore ~/key.jks -keyalg RSA -keysize 2048 -validity 10000 -<span class="built_in">alias</span> key</span><br></pre></td></tr></table></figure><ul><li>Windows</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">keytool -genkey -v -keystore c:\Users\USER_NAME\key.jks -storetype JKS -keyalg RSA -keysize 2048 -validity 10000 -<span class="built_in">alias</span> key</span><br></pre></td></tr></table></figure><ol start="2"><li>配置<code>Gradle</code></li></ol><p>路径: <code>android/app/build.gradle</code></p><ul><li>设置 <code>signingConfigs</code> 以及 <code>buildTypes</code></li></ul><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- <span class="keyword">import</span> start --&gt;</span><br><span class="line">    signingConfigs &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            keyAlias keystoreProperties[<span class="string">'keyAlias'</span>]</span><br><span class="line">            keyPassword keystoreProperties[<span class="string">'keyPassword'</span>]</span><br><span class="line">            storeFile keystoreProperties[<span class="string">'storeFile'</span>] ? <span class="keyword">file</span>(keystoreProperties[<span class="string">'storeFile'</span>]) : <span class="keyword">null</span></span><br><span class="line">            storePassword keystoreProperties[<span class="string">'storePassword'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        debug &#123;</span><br><span class="line">            signingConfig signingConfigs.debug</span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!-- <span class="keyword">import</span> end --&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置<code>keystoreProperties</code></li></ul><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">apply plugin: <span class="string">'com.android.application'</span></span><br><span class="line">apply <span class="keyword">from</span>: <span class="string">"$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"</span></span><br><span class="line"></span><br><span class="line">&lt;!-- <span class="keyword">import</span> start --&gt;</span><br><span class="line"><span class="keyword">def</span> keystoreProperties = <span class="keyword">new</span> Properties()</span><br><span class="line"><span class="keyword">def</span> keystorePropertiesFile = rootProject.<span class="keyword">file</span>(<span class="string">'key.properties'</span>)</span><br><span class="line"><span class="keyword">if</span> (keystorePropertiesFile.exists()) &#123;</span><br><span class="line">    keystoreProperties.load(<span class="keyword">new</span> FileInputStream(keystorePropertiesFile))</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    keystoreProperties.setProperty(<span class="string">'storePassword'</span>, System.getenv(<span class="string">'KEY_STORE_PASSWORD'</span>));</span><br><span class="line">    keystoreProperties.setProperty(<span class="string">'keyPassword'</span>, System.getenv(<span class="string">'KEY_PASSWORD'</span>));</span><br><span class="line">    keystoreProperties.setProperty(<span class="string">'keyAlias'</span>, System.getenv(<span class="string">'KEY_ALIAS'</span>));</span><br><span class="line">    keystoreProperties.setProperty(<span class="string">'storeFile'</span>, System.getenv(<span class="string">'KEY_PATH'</span>));</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- <span class="keyword">import</span> end --&gt;</span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">29</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="3"><li>设置环境变量</li></ol><p>path: <code>macos</code>/<code>linux</code> 下 <code>~/.zshrc</code> or <code>~/.bashrc</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Flutter - Android</span></span><br><span class="line"><span class="built_in">export</span> KEY_STORE_PASSWORD=XXXXX</span><br><span class="line"><span class="built_in">export</span> KEY_PASSWORD=XXXXX</span><br><span class="line"><span class="built_in">export</span> KEY_ALIAS=key</span><br><span class="line"><span class="built_in">export</span> KEY_PATH=~/key.jks</span><br></pre></td></tr></table></figure><h3 id="本地-Build"><a href="#本地-Build" class="headerlink" title="本地 Build"></a>本地 Build</h3><ul><li><code>APK</code> Build</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter build apk --obfuscate --split-per-abi --split-debug-info=./info</span><br></pre></td></tr></table></figure><p><code>.apk</code> 路径</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">build/app/outputs/apk/release/app-x86_64-release.apk</span><br><span class="line">build/app/outputs/apk/release/app-armeabi-v7a-release.apk</span><br><span class="line">build/app/outputs/apk/release/app-arm64-v8a-release.apk</span><br></pre></td></tr></table></figure><ul><li><code>AAB</code> Build</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">flutter build appbundle --obfuscate --split-debug-info=./info</span><br></pre></td></tr></table></figure><p><code>.aab</code> 路径 <code>build/app/outputs/bundle/release/app-release.aab</code></p><h2 id="Github-Action-CI"><a href="#Github-Action-CI" class="headerlink" title="Github Action CI"></a>Github Action CI</h2><h3 id="Secrets"><a href="#Secrets" class="headerlink" title="Secrets"></a>Secrets</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">KEY_ALIAS           <span class="comment"># e.g. key</span></span><br><span class="line">KEY_PASSWORD        <span class="comment"># e.g. xxxxxx</span></span><br><span class="line">KEY_PATH            <span class="comment"># e.g. key.jks</span></span><br><span class="line">KEY_STORE_PASSWORD  <span class="comment"># e.g. xxxxxx</span></span><br><span class="line">PACKAGE_NAME        <span class="comment"># 包名 e.g. com.di1shuai.xxxxx</span></span><br><span class="line">PLAY_JSON           <span class="comment"># e.g. &#123;xxxxxx&#125;</span></span><br><span class="line">SIGNING_KEY         <span class="comment"># 加密key后得到</span></span><br></pre></td></tr></table></figure><ul><li><code>SIGNING_KEY</code> 加密<code>key</code>得到</li></ul><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">openssl base64 -A -<span class="keyword">in</span> ~/key.jks</span><br></pre></td></tr></table></figure><h3 id="配置-Action"><a href="#配置-Action" class="headerlink" title="配置 Action"></a>配置 Action</h3><p>路径 <code>.github/workflows/build.yml</code></p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">beta-build</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">tags:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'*-beta*'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">android-build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-java@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">java-version:</span> <span class="string">'11'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Cache</span> <span class="string">Flutter</span> <span class="string">Dependencies</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/cache@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">/opt/hostedtoolcache/flutter</span></span><br><span class="line">          <span class="attr">key:</span> <span class="string">$&#123;&#123;</span> <span class="string">runner.os</span> <span class="string">&#125;&#125;-flutter</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">subosito/flutter-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">channel:</span> <span class="string">'dev'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Env</span> <span class="string">Init</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"$<span class="template-variable">&#123;&#123; secrets.SIGNING_KEY &#125;&#125;</span>"</span> <span class="string">|</span> <span class="string">base64</span> <span class="string">--decode</span> <span class="string">&gt;</span> <span class="string">android/app/$&#123;&#123;secrets.KEY_PATH&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">AAB/APK</span> <span class="string">Build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">flutter</span> <span class="string">build</span> <span class="string">appbundle</span> <span class="string">--obfuscate</span> <span class="string">--split-debug-info=./info</span></span><br><span class="line">          <span class="string">flutter</span> <span class="string">build</span> <span class="string">apk</span> <span class="string">--obfuscate</span> <span class="string">--split-per-abi</span> <span class="string">--split-debug-info=./info</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">KEY_STORE_PASSWORD:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.KEY_STORE_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">KEY_PASSWORD:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.KEY_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">KEY_ALIAS:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.KEY_ALIAS</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">KEY_PATH:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.KEY_PATH</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Push</span> <span class="string">AAB/APK</span> <span class="string">Github</span> <span class="string">Releases</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">ncipollo/release-action@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">artifacts:</span> <span class="string">"build/app/outputs/bundle/release/app-release.aab,build/app/outputs/apk/release/*.apk"</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Upload</span> <span class="string">AAB</span> <span class="string">to</span> <span class="string">Artifact</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/upload-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">appbundle</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">build/app/outputs/bundle/release/app-release.aab</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">aab-release:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Release</span> <span class="string">app</span> <span class="string">to</span> <span class="string">beta</span> <span class="string">track</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">[</span> <span class="string">android-build</span> <span class="string">]</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">appbundle</span> <span class="string">from</span> <span class="string">artifacts</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/download-artifact@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">appbundle</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Release</span> <span class="string">app</span> <span class="string">to</span> <span class="string">beta</span> <span class="string">track</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">r0adkll/upload-google-play@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">serviceAccountJsonPlainText:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PLAY_JSON</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">packageName:</span> <span class="string">$&#123;&#123;secrets.PACKAGE_NAME&#125;&#125;</span></span><br><span class="line">          <span class="attr">releaseFiles:</span> <span class="string">app-release.aab</span></span><br><span class="line">          <span class="attr">track:</span> <span class="string">beta</span></span><br><span class="line">          <span class="attr">whatsNewDirectory:</span> <span class="string">distribution/whatsnew</span></span><br></pre></td></tr></table></figure><h3 id="Push-Tag"><a href="#Push-Tag" class="headerlink" title="Push Tag"></a>Push Tag</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag 1.0.0-beta1</span><br><span class="line">git push origin 1.0.0-beta1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;CI&lt;/code&gt;目标: 使用&lt;code&gt;GithubAction&lt;/code&gt;发布&lt;code&gt;Flutter&lt;/code&gt;项目&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Android&lt;/code&gt; - &lt;code&gt;PlayStore&lt;/code&gt;/&lt;code&gt;G
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="Flutter" scheme="https://di1shuai.com/tags/Flutter/"/>
    
      <category term="Github" scheme="https://di1shuai.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>招行积分题</title>
    <link href="https://di1shuai.com/%E6%8B%9B%E8%A1%8C%E7%A7%AF%E5%88%86%E9%A2%98.html"/>
    <id>https://di1shuai.com/%E6%8B%9B%E8%A1%8C%E7%A7%AF%E5%88%86%E9%A2%98.html</id>
    <published>2020-10-17T18:24:07.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.di1shuai.com/cmb_question_bank_01.jpg" alt></p><p>助力您轻松过关招行积分答题活动，每日一搜，积分到手。</p><p><img src="https://images.di1shuai.com/cmb_question_bank_02.jpg" alt></p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li><p>Android</p><!-- - [Google Play]() --><ul><li><a href="http://file.di1shuai.com/app-arm64-v8a-release.apk" target="_blank" rel="noopener">免费下载</a></li></ul><p><img src="https://images.di1shuai.com/apk.png" alt></p></li><li><p>IOS</p></li><li><p>Windows</p></li><li><p>Macos</p></li><li><p>Linux</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://images.di1shuai.com/cmb_question_bank_01.jpg&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;助力您轻松过关招行积分答题活动，每日一搜，积分到手。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.di
      
    
    </summary>
    
    
      <category term="products" scheme="https://di1shuai.com/categories/products/"/>
    
    
      <category term="application" scheme="https://di1shuai.com/tags/application/"/>
    
      <category term="Flutter" scheme="https://di1shuai.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之行为型</title>
    <link href="https://di1shuai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B.html"/>
    <id>https://di1shuai.com/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A1%8C%E4%B8%BA%E5%9E%8B.html</id>
    <published>2020-09-10T15:12:00.000Z</published>
    <updated>2021-04-03T23:26:31.483Z</updated>
    
    <content type="html"><![CDATA[<p>行为型设计模式主要包括</p><h2 id="行为型"><a href="#行为型" class="headerlink" title="行为型"></a>行为型</h2><h3 id="观察者"><a href="#观察者" class="headerlink" title="观察者"></a>观察者</h3><blockquote><p>定义对象间的一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都得到通知</p></blockquote><ol><li>依赖关系</li></ol><p>多个观察者 <code>Observer Implements</code>            —依赖—&gt;             数据对象 <code>Subject Implement</code></p><pre><code>构造方法传参构造Subject成员变量，并将自己注册在Subject的观察者列表                              </code></pre><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObserverImpl1</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> Subject subject;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ObserverImpl1</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subject = subject;</span><br><span class="line"><span class="comment">//重要2</span></span><br><span class="line"><span class="keyword">this</span>.subject.addObserver(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>变化通知</li></ol><p>数据对象变化 <code>Subject Implement</code>            —通知—&gt;             多个观察者 </p><pre><code>`setXX()`                              `notifyObservers()`</code></pre><ol start="3"><li>Code Demo </li></ol><ul><li>方法论</li></ul><p>Subject </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">(Observer observer)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Subject Implement</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataSubject</span> <span class="keyword">implements</span> <span class="title">Subject</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;Observer&gt; observers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">DataSubject</span><span class="params">()</span></span>&#123;</span><br><span class="line">observers = <span class="keyword">new</span> ArrayList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">observers.add(observer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">removeObserver</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>&#123;</span><br><span class="line">observers.stream()</span><br><span class="line">.filter(Objects::nonNull)</span><br><span class="line">.forEach(o -&gt; o.update());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重要1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">notifyObservers();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Observer</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Observer  Implements</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObserverImpl1</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Subject subject;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ObserverImpl1</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subject = subject;</span><br><span class="line"><span class="comment">//重要2</span></span><br><span class="line"><span class="keyword">this</span>.subject.addObserver(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ObserverImpl2</span> <span class="keyword">implements</span> <span class="title">Observer</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Subject subject;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ObserverImpl2</span><span class="params">(Subject subject)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subject = subject;</span><br><span class="line"><span class="comment">//重要2</span></span><br><span class="line"><span class="keyword">this</span>.subject.addObserver(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>场景</li></ul><p>气象站 – 程序入口</p><p>气象站测得数据后，要显示在显示板上</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">温度                当前状态显示板</span><br><span class="line">湿度   -&gt;  数据  -&gt;  气相统计显示板</span><br><span class="line">压强                简单预报显示板</span><br></pre></td></tr></table></figure><p><img src="https://images.di1shuai.com/2021-01-06-Observer.png" alt></p><ol start="4"><li>Java原生</li></ol><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.util.Observable  -&gt; Subejct</span><br><span class="line">java.util.Observer    -&gt; Observer</span><br></pre></td></tr></table></figure><p>但是由于 <code>Observable</code> 是一个类，而Java是单继承的继承方式，耦合度太强，所以基本不建议使用</p><h3 id="访问者"><a href="#访问者" class="headerlink" title="访问者"></a>访问者</h3><h3 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h3><h3 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h3><h3 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h3><h3 id="备忘录"><a href="#备忘录" class="headerlink" title="备忘录"></a>备忘录</h3><h3 id="中介"><a href="#中介" class="headerlink" title="中介"></a>中介</h3><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><h3 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h3><h3 id="责任链"><a href="#责任链" class="headerlink" title="责任链"></a>责任链</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;行为型设计模式主要包括&lt;/p&gt;
&lt;h2 id=&quot;行为型&quot;&gt;&lt;a href=&quot;#行为型&quot; class=&quot;headerlink&quot; title=&quot;行为型&quot;&gt;&lt;/a&gt;行为型&lt;/h2&gt;&lt;h3 id=&quot;观察者&quot;&gt;&lt;a href=&quot;#观察者&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="设计模式" scheme="https://di1shuai.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java各版本新特性</title>
    <link href="https://di1shuai.com/Java%E5%90%84%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7.html"/>
    <id>https://di1shuai.com/Java%E5%90%84%E7%89%88%E6%9C%AC%E6%96%B0%E7%89%B9%E6%80%A7.html</id>
    <published>2020-08-30T17:27:32.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JDK各版本特性"><a href="#JDK各版本特性" class="headerlink" title="JDK各版本特性"></a>JDK各版本特性</h1><h2 id="历史版本主要特性"><a href="#历史版本主要特性" class="headerlink" title="历史版本主要特性"></a>历史版本主要特性</h2><p><strong>JDK 1.5</strong> ：enum、泛型，自动装箱与拆箱、可变参数、增强循环</p><p>JDK 1.6 ：支持脚本语言、JDBC4.0API</p><p>JDK 1.7： 支持try-with-resources、switch语句块增加String支持、NIO2.0包</p><p><strong>JDK 1.8</strong>： lambda表达式、Stream API、新的日期时间的API、方法引用、构造器引用</p><p>JDK 9 ： 模块化系统、jshell</p><p>JDK 10 ： 局部变量的类型推断</p><p><strong>JDK 11</strong>： ZGC的引入、Epsilon GC</p><p>JDK 12： switch表达式、Shenandoah GC、增强GC</p><p>JDK 13： switch表达式引入yield、文本块</p><p>JDK14 ：instanceof 模式识别、Records、启用Parallel Scavenge+Serial GC组合、删除CMS GC</p><h2 id="1-8"><a href="#1-8" class="headerlink" title="1.8"></a>1.8</h2><p><img src="https://images.di1shuai.com/2021-01-23-1.8.png" alt></p><h3 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"foreach-less1.8"</span>);</span><br><span class="line"><span class="comment">//foreach-less1.8</span></span><br><span class="line">List&lt;String&gt; strings = Arrays.asList(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"c"</span>);</span><br><span class="line"><span class="keyword">for</span> (String str:strings) &#123;</span><br><span class="line">    System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"-------"</span>);</span><br><span class="line">System.out.println(<span class="string">"foreach 1.8"</span>);</span><br><span class="line"><span class="comment">//foreach 1.8</span></span><br><span class="line">strings.forEach(str -&gt; System.out.println(str));</span><br></pre></td></tr></table></figure><h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//stream</span></span><br><span class="line">strings.stream()</span><br><span class="line">        .distinct()</span><br><span class="line">        .limit(<span class="number">2</span>)</span><br><span class="line">        .filter(str -&gt; str == <span class="string">"a"</span>)</span><br><span class="line">        .forEach(str -&gt; System.out.println(str));</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"==========="</span>);</span><br><span class="line">System.out.println(<span class="string">"peek"</span>);</span><br><span class="line">strings.parallelStream()</span><br><span class="line">        .skip(<span class="number">2</span>)</span><br><span class="line">        .forEach(str -&gt; System.out.println(str));</span><br><span class="line">System.out.println(<span class="string">"==========="</span>);</span><br><span class="line">distinctPrimary(<span class="string">"12"</span>,<span class="string">"23"</span>,<span class="string">"12"</span>,<span class="string">"23"</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">distinctPrimary</span><span class="params">(String...numbers)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; strings = Arrays.asList(numbers);</span><br><span class="line">        List&lt;Integer&gt; collect = strings.parallelStream()</span><br><span class="line">                .map(e -&gt; <span class="keyword">new</span> Integer(e))</span><br><span class="line"><span class="comment">//              .filter(e -&gt; Primes.isPrime(e))</span></span><br><span class="line">                .distinct()</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">        System.out.println(collect);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><ul><li>默认方法</li><li>静态方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">jump</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getSimpleName()+ <span class="string">" jump"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Animal.class.getSimpleName()+" eat");</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Date-Time-API-LocalDate-amp-LocalDateTime"><a href="#Date-Time-API-LocalDate-amp-LocalDateTime" class="headerlink" title="Date Time API - LocalDate &amp; LocalDateTime"></a>Date Time API - LocalDate &amp; LocalDateTime</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalDateAndTimeAndDateTime</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        localdate();</span></span><br><span class="line"><span class="comment">//        localtime();</span></span><br><span class="line"><span class="comment">//        localdatetime();</span></span><br><span class="line"><span class="comment">//        test1();</span></span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LocalDateTime localDateTime1 = LocalDateTime.parse(<span class="string">"2016-09-06T06:00:00"</span>);</span><br><span class="line">        LocalDateTime localDateTime2 = LocalDateTime.parse(<span class="string">"2016-09-06T07:00:00"</span>);</span><br><span class="line"><span class="comment">//        System.out.println(localDateTime1.getLong(ChronoField.NANO_OF_DAY));</span></span><br><span class="line">        <span class="keyword">long</span> time1 = localDateTime1.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line">        <span class="keyword">long</span> time2 = localDateTime2.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">localdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        System.out.println(today);</span><br><span class="line"></span><br><span class="line">        LocalDate someday = LocalDate.of(<span class="number">2016</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">        LocalDate withstr = LocalDate.parse(<span class="string">"2016-08-09"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (someday.equals(withstr))</span><br><span class="line">            System.out.println(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            System.out.println(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取本月第1天：</span></span><br><span class="line">        LocalDate firstDayOfThisMonth = today.with(TemporalAdjusters.firstDayOfMonth()); <span class="comment">// 2016-08-09</span></span><br><span class="line">        <span class="comment">// 取本月第2天：</span></span><br><span class="line">        LocalDate secondDayOfThisMonth = today.withDayOfMonth(<span class="number">2</span>); <span class="comment">// 2016-08-02</span></span><br><span class="line">        <span class="comment">// 取本月最后一天，再也不用计算是28，29，30还是31：</span></span><br><span class="line">        LocalDate lastDayOfThisMonth = today.with(TemporalAdjusters.lastDayOfMonth()); <span class="comment">// 2016-08-31</span></span><br><span class="line">        <span class="comment">// 取下一天：</span></span><br><span class="line">        LocalDate firstDayOf2015 = lastDayOfThisMonth.plusDays(<span class="number">1</span>); <span class="comment">// 变成了2016-09-01</span></span><br><span class="line">        <span class="comment">// 取2016年9月第一个周一，这个计算用Calendar要死掉很多脑细胞：</span></span><br><span class="line">        LocalDate firstMondayOf2015 = LocalDate.parse(<span class="string">"2016-09-01"</span>).with(TemporalAdjusters.firstInMonth(DayOfWeek.MONDAY)); <span class="comment">// 2016-09-05</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">localtime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//包含毫秒</span></span><br><span class="line">        LocalTime now = LocalTime.now();</span><br><span class="line">        System.out.println(now);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//清除毫秒数</span></span><br><span class="line">        LocalTime time = LocalTime.now().withNano(<span class="number">0</span>);</span><br><span class="line">        System.out.println(time);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造时间</span></span><br><span class="line">        LocalTime zero = LocalTime.of(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>); <span class="comment">// 00:00:00</span></span><br><span class="line">        LocalTime mid = LocalTime.parse(<span class="string">"12:00:00"</span>); <span class="comment">// 12:00:00</span></span><br><span class="line">        System.out.println(zero);</span><br><span class="line">        System.out.println(mid);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">localdatetime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"><span class="comment">//        LocalDateTime now = LocalDateTime.now();</span></span><br><span class="line"><span class="comment">//        System.out.println(now);</span></span><br><span class="line"><span class="comment">//        LocalDateTime hello = LocalDateTime.parse("2016-08-09T12:00:00:000",DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss:zzz"));</span></span><br><span class="line"><span class="comment">//        System.out.println(hello);</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        System.out.println(System.currentTimeMillis()-start);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.diyishuai.java8.optional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.diyishuai.java8.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Shea</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OptionalDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> isNull = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String id = <span class="string">"666"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.7</span></span><br><span class="line">        Student student = getById(id);</span><br><span class="line">        <span class="keyword">if</span> (student != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"if : name -&gt; "</span> + student.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.8</span></span><br><span class="line">        Optional&lt;Student&gt; studentOpt = Optional.ofNullable(getById(id));</span><br><span class="line">        studentOpt.ifPresent(s -&gt;</span><br><span class="line">                System.out.println(<span class="string">"opt : name -&gt; "</span> + s.getName())</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Student <span class="title">getById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> isNull ? <span class="keyword">null</span> : <span class="keyword">new</span> Student().setId(id).setName(id + <span class="string">" student"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Base64-java-util-Base64"><a href="#Base64-java-util-Base64" class="headerlink" title="Base64 - java.util.Base64"></a>Base64 - <code>java.util.Base64</code></h3><p>将Base64引入工具包</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.diyishuai.java8.base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Shea</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-01-20</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Base64Demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Base64.Encoder encoder = Base64.getEncoder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Base64.Decoder decoder = Base64.getDecoder();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">"Hello Java8, 你好 Java8"</span>;</span><br><span class="line">        System.out.println(<span class="string">"原字符串 -&gt; "</span> + str);</span><br><span class="line"></span><br><span class="line">        String encode = encode(str);</span><br><span class="line">        System.out.println(<span class="string">"Base64 Encode -&gt; "</span> + encode);</span><br><span class="line"></span><br><span class="line">        String decode = decode(encode);</span><br><span class="line">        System.out.println(<span class="string">"Base64 Decode -&gt; "</span> + decode);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decode</span><span class="params">(String encode)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(decoder.decode(encode),StandardCharsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> encoder.encodeToString(str.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><ul><li>类静态方法引用</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">classStaticFunctionReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"类静态方法引用"</span>);</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="keyword">new</span> Apple(<span class="string">"1"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Apple(<span class="string">"2"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Apple(<span class="string">"3"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Apple[]&#123;<span class="keyword">new</span> Apple(<span class="string">"4"</span>), <span class="keyword">new</span> Apple(<span class="string">"5"</span>)&#125;);</span><br><span class="line"></span><br><span class="line">    list.stream().forEach(Show::show);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object o : (List) obj) &#123;</span><br><span class="line">                System.out.print(o.toString() + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Object[]) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Object o : (Object[]) obj) &#123;</span><br><span class="line">                System.out.print(o.toString() + <span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(obj.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实例方法引用</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">instanceFunctionReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"实例方法引用"</span>);</span><br><span class="line">    List&lt;Apple&gt; list = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    list.add(<span class="keyword">new</span> Apple(<span class="string">"1"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Apple(<span class="string">"2"</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Apple(<span class="string">"3"</span>));</span><br><span class="line"></span><br><span class="line">    list.stream().map(a -&gt; a.getId()).forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">"----"</span>);</span><br><span class="line">    list.stream().map(Apple::getId).forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类构造方法引用</li></ul><p>无参构造</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 0 无参构造</span></span><br><span class="line">Supplier&lt;Apple&gt; appleSupplier = Apple::<span class="keyword">new</span>;</span><br><span class="line">Apple a0 = appleSupplier.get();</span><br></pre></td></tr></table></figure><p>单参构造</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1 单参构造</span></span><br><span class="line">Function&lt;String, Apple&gt; appleFunction = Apple::<span class="keyword">new</span>;</span><br><span class="line">Apple a1 = appleFunction.apply(<span class="string">"1"</span>);</span><br></pre></td></tr></table></figure><p>双参构造</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BiFunction&lt;String,Double,Apple&gt; appleBiFunction = Apple::<span class="keyword">new</span>;</span><br><span class="line">Apple a2 = appleBiFunction.apply(<span class="string">"2"</span>, <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><h3 id="JVM的新特性-Metaspace-替代-PermGen-space"><a href="#JVM的新特性-Metaspace-替代-PermGen-space" class="headerlink" title="JVM的新特性 - Metaspace 替代 PermGen space"></a>JVM的新特性 - <code>Metaspace</code> 替代 <code>PermGen space</code></h3><p>使用元空间Metaspace代替持久代（PermGen space），</p><p>JVM参数使用 <code>-XX:MetaSpaceSize</code> 和 <code>-XX:MaxMetaspaceSize</code> 设置大小。</p><h2 id="9"><a href="#9" class="headerlink" title="9"></a>9</h2><p><img src="https://images.di1shuai.com/2021-01-23-9.png" alt></p><h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h3 id="不可变集合工厂方法"><a href="#不可变集合工厂方法" class="headerlink" title="不可变集合工厂方法"></a>不可变集合工厂方法</h3><p>&lt; 9 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// before 9</span></span><br><span class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">stringList.add(<span class="string">"Hello "</span>);</span><br><span class="line">stringList.add(<span class="string">"Java 9"</span>);</span><br><span class="line">List&lt;String&gt; unmodifiableList = Collections.unmodifiableList(stringList);</span><br></pre></td></tr></table></figure><p>9</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// after 9</span></span><br><span class="line">List&lt;String&gt; unmodifiableList_9 = List.of(<span class="string">"Hello "</span>,<span class="string">"Java 9"</span>);</span><br></pre></td></tr></table></figure><h3 id="接口支持私有方法"><a href="#接口支持私有方法" class="headerlink" title="接口支持私有方法"></a>接口支持私有方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PrivateInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cantFindMe</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"cant find me"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Optional-改进"><a href="#Optional-改进" class="headerlink" title="Optional 改进"></a>Optional 改进</h3><ul><li><code>stream()</code></li><li><code>ifPresentOrElse()</code></li><li><code>or()</code></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;Integer&gt; optional = Optional.of(<span class="number">1</span>);</span><br><span class="line">optional.ifPresentOrElse(</span><br><span class="line">        x -&gt; System.out.println(<span class="string">"Value: "</span> + x),</span><br><span class="line">        () -&gt; System.out.println(<span class="string">"Not Present."</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">optional = Optional.empty();</span><br><span class="line"></span><br><span class="line">optional.ifPresentOrElse(</span><br><span class="line">        x -&gt; System.out.println(<span class="string">"Value: "</span> + x),</span><br><span class="line">        () -&gt; System.out.println(<span class="string">"Not Present."</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="try-with-resources-改进"><a href="#try-with-resources-改进" class="headerlink" title="try-with-resources 改进"></a><code>try-with-resources</code> 改进</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    System.out.println(readDataBefore9(<span class="string">"TryWithResources"</span>));</span><br><span class="line">    System.out.println(readDataAfter9(<span class="string">"TryWithResources"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">readDataBefore9</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> (BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> StringReader(message));) &#123;</span><br><span class="line">        <span class="keyword">return</span> br.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">readDataAfter9</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    Reader inputString = <span class="keyword">new</span> StringReader(message);</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader(inputString);</span><br><span class="line">    <span class="keyword">try</span> (br) &#123;</span><br><span class="line">        <span class="keyword">return</span> br.readLine();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Stream-API-更新"><a href="#Stream-API-更新" class="headerlink" title="Stream API 更新"></a>Stream API 更新</h3><ul><li><code>takeWhile()</code> 返回第一次遇到false之前的元素</li><li><code>dropWhile()</code> 返回第一次遇到false之后的元素</li><li><code>iterate</code></li><li><code>ofNullable</code></li></ul><p>原数据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Supplier&lt;Stream&lt;Integer&gt;&gt; streamSupplier = () -&gt; Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>);</span><br></pre></td></tr></table></figure><p><code>takeWhile()</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"takeWhile"</span>);</span><br><span class="line">streamSupplier.get()</span><br><span class="line">        .takeWhile(x -&gt; x &lt; <span class="number">3</span>)</span><br><span class="line">        .forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">takeWhile</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p><code>dropWhile</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"dropWhile"</span>);</span><br><span class="line">        streamSupplier.get()</span><br><span class="line">                .dropWhile(x -&gt; x &lt; <span class="number">3</span>)</span><br><span class="line">                .forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dropWhile</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><p><code>iterate</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="string">"iterate"</span>);</span><br><span class="line">IntStream.iterate(<span class="number">2</span>, x -&gt; x &lt; <span class="number">10000</span>, x -&gt; x * x).forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">iterate</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">256</span></span><br></pre></td></tr></table></figure><p><code>ofNullable</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream.ofNullable(<span class="number">100</span>).forEach(System.out::println);</span><br><span class="line">Stream.ofNullable(<span class="keyword">null</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ofNullable</span><br><span class="line"><span class="number">100</span></span><br></pre></td></tr></table></figure><h3 id="多版本兼容Jar包"><a href="#多版本兼容Jar包" class="headerlink" title="多版本兼容Jar包"></a>多版本兼容Jar包</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><strong>其他</strong></h3><ul><li>HTTP 2客户端 (支持 WebSocket和 HTTP2 流以及服务器推送)</li><li>进程API（控制和管理操作系统进程）</li><li>String底层存储结构更改(char[]替换为byte[])</li><li>标识符添加限制( String _ =”hello”不能用)</li><li>响应式流 API (支持Java 9中的响应式编程)</li></ul><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><h3 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Before 10</span></span><br><span class="line">String str = <span class="string">"hello "</span>;</span><br><span class="line">Integer i = <span class="number">1</span>;</span><br><span class="line">System.out.println(str + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">// After 10</span></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="string">"hi "</span>;</span><br><span class="line"><span class="keyword">var</span> obj2 = Integer.parseInt(<span class="string">"1"</span>);</span><br><span class="line">System.out.println(obj1 + obj2);</span><br><span class="line">System.out.println(<span class="string">"obj1 -&gt; "</span> + obj1.getClass().getSimpleName());</span><br><span class="line">System.out.println(<span class="string">"obj2 -&gt; "</span> + obj2);</span><br></pre></td></tr></table></figure><h3 id="不可变集合更新"><a href="#不可变集合更新" class="headerlink" title="不可变集合更新"></a>不可变集合更新</h3><p>List，Set，Map 提供了一个新的静态方法 <code>copyOf(Collection&lt;? extends E&gt; coll)</code>，它返回Collection集合一个不可修改的副本</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oldList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">oldList.add(<span class="string">"hello"</span>);</span><br><span class="line">oldList.add(<span class="string">"Java10"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> copyList = List.copyOf(oldList);</span><br><span class="line">oldList.add(<span class="string">"hi"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    copyList.add(<span class="string">"Java10"</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (UnsupportedOperationException e)&#123;</span><br><span class="line">    System.out.println(<span class="string">"操作不允许"</span>);</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="并行全垃圾回收器G1"><a href="#并行全垃圾回收器G1" class="headerlink" title="并行全垃圾回收器G1"></a>并行全垃圾回收器G1</h3><p>JDK 9引入 G1 作为默认垃圾收集器，执行GC 时采用的是基于单线程标记扫描压缩算法（mark-sweep-compact）。为了最大限度地减少 Full GC 造成的应用停顿的影响，Java 10 中将为 G1 引入多线程并行 GC，同时会使用与年轻代回收和混合回收相同的并行工作线程数量，从而减少了 Full GC 的发生，以带来更好的性能提升、更大的吞吐量。</p><h3 id="线程本地握手"><a href="#线程本地握手" class="headerlink" title="线程本地握手"></a>线程本地握手</h3><p>Java 10 中线程管控引入JVM安全点的概念，将允许在不运行全局JVM安全点的情况下实现线程回调，由线程本身或者JVM线程来执行，同时保持线程处于阻塞状态，这将会很方便使得停止单个线程或不停止线程成为可能。</p><h3 id="Optional-更新-orElseThrow"><a href="#Optional-更新-orElseThrow" class="headerlink" title="Optional 更新 orElseThrow()"></a>Optional 更新 <code>orElseThrow()</code></h3><p><code>orElseThrow()</code>在没有值时抛出异常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt;String&gt; op;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    op = Optional.of(<span class="keyword">null</span>);</span><br><span class="line">    op.orElseThrow();</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">    System.out.println(<span class="string">"捕获到"</span>);</span><br><span class="line">&#125;</span><br><span class="line">op = Optional.of(<span class="string">"hi"</span>);</span><br><span class="line">op.orElseThrow();</span><br><span class="line">System.out.println(op.get());</span><br></pre></td></tr></table></figure><h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><ul><li>基于 Java 的 实验性 JIT 编译器</li><li>类数据共享</li><li>Unicode 语言标签扩展</li><li>根证书</li><li>基于时间（Time-Based）的版本控制模型</li></ul><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><p><img src="https://images.di1shuai.com/2021-01-23-11.png" alt></p><h3 id="字符串-API更新"><a href="#字符串-API更新" class="headerlink" title="字符串 API更新"></a>字符串 API更新</h3><p>新增</p><ul><li>isBlank() 判空。</li><li>strip() 去除首尾空格</li><li>stripLeading() 去除字符串首部空格</li><li>stripTrailing() 去除字符串尾部空格</li><li>lines() 分割获取字符串流。</li><li>repeat() 复制字符串</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判空</span></span><br><span class="line">System.out.println(</span><br><span class="line">        <span class="string">"isBlank() -&gt;"</span> +</span><br><span class="line">                <span class="string">""</span>.isBlank() + <span class="string">"\t"</span> +    <span class="comment">// true</span></span><br><span class="line">                <span class="string">"   "</span>.isBlank() + <span class="string">"\t"</span> + <span class="comment">// true</span></span><br><span class="line">                <span class="string">"1"</span>.isBlank() + <span class="string">"\t"</span>    <span class="comment">// false</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 去除首尾空格</span></span><br><span class="line">System.out.println(<span class="string">"strip() -&gt;"</span> + <span class="string">"Java11 "</span>.strip()); <span class="comment">//"Java11"</span></span><br><span class="line"><span class="comment">// 去除首部空格</span></span><br><span class="line">System.out.println(<span class="string">"stripLeading() -&gt;"</span> + <span class="string">" Java11 "</span>.stripLeading());   <span class="comment">// "Java11 "</span></span><br><span class="line"><span class="comment">// 去除字符串尾部空格</span></span><br><span class="line">System.out.println(<span class="string">"stripTrailing() -&gt;"</span>+<span class="string">" Java11 "</span>.stripTrailing());   <span class="comment">// " Java11"</span></span><br><span class="line"><span class="comment">// 行数统计</span></span><br><span class="line">System.out.println(<span class="string">"lines() -&gt;"</span>+<span class="string">"a\nb\nc"</span>.lines().count());    <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 复制字符串</span></span><br><span class="line">System.out.println(<span class="string">"repeat(3) -&gt;"</span>+<span class="string">"Java11"</span>.repeat(<span class="number">3</span>));   <span class="comment">// "Java11Java11Java11"</span></span><br></pre></td></tr></table></figure><h3 id="Lambda-推断类型参数的局部变量语法"><a href="#Lambda-推断类型参数的局部变量语法" class="headerlink" title="Lambda 推断类型参数的局部变量语法"></a>Lambda 推断类型参数的局部变量语法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">map.put(<span class="string">"Hello"</span>, <span class="string">"Java11"</span>);</span><br><span class="line">map.put(<span class="string">"hi"</span>, <span class="number">11</span>);</span><br><span class="line">map.forEach((<span class="keyword">var</span> k, <span class="keyword">var</span> v) -&gt; &#123;</span><br><span class="line">    System.out.println(k + <span class="string">": "</span> + v);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="HTTPClient-标准化"><a href="#HTTPClient-标准化" class="headerlink" title="HTTPClient 标准化"></a>HTTPClient 标准化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">HttpRequest request = HttpRequest.newBuilder()</span><br><span class="line">        .uri(URI.create(<span class="string">"https://di1shuai.com"</span>))</span><br><span class="line">        .GET()</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步</span></span><br><span class="line">HttpResponse&lt;String&gt; response = client.send(request, HttpResponse.BodyHandlers.ofString());</span><br><span class="line">System.out.println(response.body());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步</span></span><br><span class="line">client.sendAsync(request, HttpResponse.BodyHandlers.ofString())</span><br><span class="line">        .thenApply(HttpResponse::body)</span><br><span class="line">        .thenAccept(System.out::println);</span><br></pre></td></tr></table></figure><h3 id="单文件java命令直接编译运行"><a href="#单文件java命令直接编译运行" class="headerlink" title="单文件java命令直接编译运行"></a>单文件java命令直接编译运行</h3><p>Before 11</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编译</span></span><br><span class="line">javac Hello.java</span><br><span class="line"><span class="comment">// 运行</span></span><br><span class="line">java Hello</span><br></pre></td></tr></table></figure><p>11</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java Hello.java</span><br></pre></td></tr></table></figure><h3 id="ZGC-可伸缩低延迟垃圾收集器"><a href="#ZGC-可伸缩低延迟垃圾收集器" class="headerlink" title="ZGC-可伸缩低延迟垃圾收集器"></a>ZGC-可伸缩低延迟垃圾收集器</h3><p>ZGC ，即 Z Garbage Collector（垃圾收集器或垃圾回收器）。它是一个可伸缩的、低延迟的垃圾收集器。ZGC 主要为了满足如下目标进行设计：</p><ul><li>GC 停顿时间不超过 10ms</li><li>既能处理几百 MB 的小堆，也能处理几个 TB 的大堆</li><li>应用吞吐能力不会下降超过 15%（与 G1 回收算法相比）</li><li>方便在此基础上引入新的 GC 特性和利用 colord</li><li>针以及 Load barriers 优化奠定基础</li><li>只支持 Linux/x64 位平台</li></ul><h3 id="其他-2"><a href="#其他-2" class="headerlink" title="其他"></a><strong>其他</strong></h3><ul><li>添加 Epsilon 垃圾收集器。</li><li>支持 TLS 1.3 协议</li><li>飞行记录器分析工具</li><li>动态类文件常量</li><li>低开销的 Heap Profiling</li></ul><h2 id="12"><a href="#12" class="headerlink" title="12"></a>12</h2><p><img src="https://images.di1shuai.com/2021-01-23-12.png" alt></p><h3 id="switch-增强-预览"><a href="#switch-增强-预览" class="headerlink" title="switch 增强(预览)"></a>switch 增强(预览)</h3><p>支持case多个</p><p>before 12</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> MONDAY:</span><br><span class="line">    <span class="keyword">case</span> TUESDAY:</span><br><span class="line">    <span class="keyword">case</span> WEDNESDAY:</span><br><span class="line">    <span class="keyword">case</span> THURSDAY:</span><br><span class="line">    <span class="keyword">case</span> FRIDAY:</span><br><span class="line">        today = TODAY.WORKING_DAY;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> SATURDAY:</span><br><span class="line">    <span class="keyword">case</span> SUNDAY:</span><br><span class="line">        today = TODAY.WEEKEND_DAY;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"N/A"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">      <span class="keyword">case</span> MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY </span><br><span class="line">-&gt; today = TODAY.WORKING_DAY;</span><br><span class="line">      <span class="keyword">case</span> SATURDAY, SUNDAY </span><br><span class="line">-&gt; today = TODAY.WEEKEND_DAY;</span><br><span class="line">      <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid day"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="NumberFormat-数字的格式化"><a href="#NumberFormat-数字的格式化" class="headerlink" title="NumberFormat - 数字的格式化"></a><code>NumberFormat</code> - 数字的格式化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> number = <span class="number">100000</span>;</span><br><span class="line">NumberFormat nfChina = NumberFormat.getCompactNumberInstance(Locale.CHINA, NumberFormat.Style.SHORT);</span><br><span class="line">System.out.println(nfChina.format(number));</span><br><span class="line"><span class="comment">//10万</span></span><br><span class="line">NumberFormat nfUK = NumberFormat.getCompactNumberInstance(Locale.UK, NumberFormat.Style.SHORT);</span><br><span class="line">System.out.println(nfUK.format(number));</span><br><span class="line"><span class="comment">//100K</span></span><br></pre></td></tr></table></figure><h3 id="字符串支持transform、indent操作"><a href="#字符串支持transform、indent操作" class="headerlink" title="字符串支持transform、indent操作"></a>字符串支持transform、indent操作</h3><ul><li>transform 转换,可以配合函数式接口Function一起使用</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//transform</span></span><br><span class="line">List.of(<span class="string">"    Hello    "</span>, <span class="string">"   Hi   "</span>).forEach(</span><br><span class="line">        s -&gt; &#123;</span><br><span class="line">            String newStr = s.transform(String::strip)</span><br><span class="line">                    .transform(e -&gt; e + <span class="string">" Java 12"</span>);</span><br><span class="line">            System.out.println(newStr);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hello Java <span class="number">12</span></span><br><span class="line">Hi Java <span class="number">12</span></span><br></pre></td></tr></table></figure><ul><li>indent 缩进，每行开头增加空格space和移除空格</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//indent</span></span><br><span class="line">String result = <span class="string">"Hello\nJava\n12\n"</span>.indent(<span class="number">3</span>);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Hello</span><br><span class="line">Java</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h3 id="Files-mismatch-Path-Path"><a href="#Files-mismatch-Path-Path" class="headerlink" title="Files.mismatch(Path, Path)"></a>Files.mismatch(Path, Path)</h3><p>文件比较 返回第一个不匹配的位置，如果没有不匹配，则返回 -1L</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Path path1 = Paths.get(<span class="string">"/Users/shuai/Documents/GitRepo/mine/language/java-versions/java-12/src/main/java/com/di1shuai/java12/files/FilesDemo.java"</span>);</span><br><span class="line">Path path2 = Paths.get(<span class="string">"/Users/shuai/Documents/GitRepo/mine/language/java-versions/java-12/src/main/java/com/di1shuai/java12/files/FilesDemo.java"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">long</span> fileMismatch = Files.mismatch(path1, path2);</span><br><span class="line">    System.out.println(fileMismatch);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Teeing-Collector"><a href="#Teeing-Collector" class="headerlink" title="Teeing Collector"></a>Teeing Collector</h3><p>Teeing Collector 是 Streams API 中引入的新的收集器实用程序，它的作用是 merge 两个 collector 的结果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Student&gt; students = Arrays.asList(</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"shea"</span>, <span class="number">28</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"abel"</span>, <span class="number">25</span>),</span><br><span class="line">        <span class="keyword">new</span> Student(<span class="string">"sean"</span>, <span class="number">40</span>)</span><br><span class="line">);</span><br><span class="line">String collect = students.stream().collect(Collectors.teeing(</span><br><span class="line">        Collectors.averagingInt(Student::getAge),</span><br><span class="line">        Collectors.summingInt(Student::getAge),</span><br><span class="line">        (avgAge, sumAge) -&gt; avgAge + <span class="string">" : "</span> + sumAge</span><br><span class="line">));</span><br><span class="line">System.out.println(collect);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">31.0</span> : <span class="number">93</span></span><br></pre></td></tr></table></figure><h3 id="其他-3"><a href="#其他-3" class="headerlink" title="其他"></a><strong>其他</strong></h3><ul><li>支持unicode 11（684个新字符、11个新blocks、7个新脚本）</li><li>JVM 常量 API （主要在新的java.lang.invoke.constant包中定义了一系列基于值的符号引用类型，能够描述每种可加载常量。）</li><li>Shenandoah GC（低暂停时间垃圾收集器）</li><li>G1 收集器提升 （可中止的混合收集集合、及时返回未使用的已分配内存）</li><li>默认CDS档案</li><li>JMH 基准测试</li></ul><h2 id="13"><a href="#13" class="headerlink" title="13"></a>13</h2><p><img src="https://images.di1shuai.com/2021-01-23-13.png" alt></p><h3 id="Switch-增强-yield"><a href="#Switch-增强-yield" class="headerlink" title="Switch 增强 - yield"></a>Switch 增强 - yield</h3><p>yield可直接返回值</p><p>&lt;13</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Before 13</span></span><br><span class="line">TODAY today;</span><br><span class="line"><span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY </span><br><span class="line">-&gt; today = TODAY.WORKING_DAY;</span><br><span class="line">    <span class="keyword">case</span> SATURDAY, SUNDAY </span><br><span class="line">-&gt; today = TODAY.WEEKEND_DAY;</span><br><span class="line">    <span class="keyword">default</span> </span><br><span class="line">-&gt; <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid day"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> today;</span><br></pre></td></tr></table></figure><p>13</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY -&gt; &#123;</span><br><span class="line">        yield TODAY.WORKING_DAY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> SATURDAY, SUNDAY -&gt; &#123;</span><br><span class="line">        yield TODAY.WEEKEND_DAY;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">default</span> -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid day"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="String文本块"><a href="#String文本块" class="headerlink" title="String文本块"></a>String文本块</h3><p>&lt;13</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String html = <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">              <span class="string">"    &lt;body&gt;\n"</span> +</span><br><span class="line">              <span class="string">"        &lt;p&gt;Hello, Java 13&lt;/p&gt;\n"</span> +</span><br><span class="line">              <span class="string">"    &lt;/body&gt;\n"</span> +</span><br><span class="line">              <span class="string">"&lt;/html&gt;\n"</span>;</span><br></pre></td></tr></table></figure><p>13</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String html13 = <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">                &lt;html&gt;</span></span><br><span class="line"><span class="string">                    &lt;body&gt;</span></span><br><span class="line"><span class="string">                        &lt;p&gt;Hello,  Java 13&lt;/p&gt;</span></span><br><span class="line"><span class="string">                    &lt;/body&gt;</span></span><br><span class="line"><span class="string">                &lt;/html&gt;</span></span><br><span class="line"><span class="string">                "</span><span class="string">""</span>;</span><br></pre></td></tr></table></figure><h3 id="SocketAPI-重构"><a href="#SocketAPI-重构" class="headerlink" title="SocketAPI 重构"></a>SocketAPI 重构</h3><p>传统的Java Socket API（java.net.ServerSocket 和 java.net.Socket）依赖于SocketImpl 的内部实现</p><p>在 Java 13之前，通过使用 PlainSocketImpl 作为 SocketImpl 的具体实现。</p><p>Java 13 中的新底层实现，引入 NioSocketImpl 的实现用以替换 SocketImpl 的 PlainSocketImpl 实现，此实现与 NIO（新 I/O）实现共享相同的内部基础结构，并且与现有的缓冲区高速缓存机制集成在一起。</p><h3 id="FileSystems-newFileSystem"><a href="#FileSystems-newFileSystem" class="headerlink" title="FileSystems.newFileSystem"></a>FileSystems.newFileSystem</h3><p>FileSystems 类中添加了以下三种新方法，以便更容易地使用将文件内容视为文件系统的文件系统提供程序：</p><ul><li>newFileSystem(Path)</li><li>newFileSystem(Path, Map&lt;String, ?&gt;)</li><li>newFileSystem(Path, Map&lt;String, ?&gt;, ClassLoader)</li></ul><h3 id="ZGC-增强-释放未使用内存"><a href="#ZGC-增强-释放未使用内存" class="headerlink" title="ZGC 增强 - 释放未使用内存"></a><strong>ZGC 增强 - 释放未使用内存</strong></h3><p>ZGC 是Java 11 中引入的最为瞩目的垃圾回收特性，是一种可伸缩、低延迟的垃圾收集器。但是实际使用中，它不能够主动将未使用的内存释放给操作系统。</p><p>Java 13 中对 ZGC 的改进，包括释放未使用内存给操作系统、支持最大堆大小为 16TB、JVM参数 <code>-XX:SoftMaxHeapSize</code> 来软限制堆大小</p><h3 id="其他-4"><a href="#其他-4" class="headerlink" title="其他"></a><strong>其他</strong></h3><ul><li>动态 CDS 存档， 扩展了 Java 10 中引入的类数据共享功能， 使用CDS 存档变得更容易。</li><li>文本块的字符串类新方法，如formatted(Object…args)，stripIndent()等。</li></ul><h2 id="14"><a href="#14" class="headerlink" title="14"></a>14</h2><h3 id="instanceof-模式匹配改进"><a href="#instanceof-模式匹配改进" class="headerlink" title="instanceof 模式匹配改进"></a>instanceof 模式匹配改进</h3><p>&lt;14</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="string">"  hello Java 14  "</span>;</span><br><span class="line"><span class="comment">// &lt; 14</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    System.out.println(((String) obj).strip());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object obj = <span class="string">"  hello Java 14  "</span>;</span><br><span class="line"><span class="comment">// 14</span></span><br><span class="line"><span class="keyword">if</span> (obj <span class="keyword">instanceof</span> String str) &#123;</span><br><span class="line">    System.out.println(str.strip());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-表达式-标准化"><a href="#switch-表达式-标准化" class="headerlink" title="switch 表达式 - 标准化"></a>switch 表达式 - 标准化</h3><h3 id="Record-类型（预览功能）"><a href="#Record-类型（预览功能）" class="headerlink" title="Record 类型（预览功能）"></a>Record 类型（预览功能）</h3><p>recode</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造方法</span></span><br><span class="line"><span class="comment"> * hashCode() 方法</span></span><br><span class="line"><span class="comment"> * euqals() 方法</span></span><br><span class="line"><span class="comment"> * toString() 方法</span></span><br><span class="line"><span class="comment"> * 类对象被final 关键字修饰，不能被继承。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">record <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"shea"</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(</span><br><span class="line">                <span class="string">""</span><span class="string">"</span></span><br><span class="line"><span class="string">                getName  -&gt; %s        </span></span><br><span class="line"><span class="string">                getAge   -&gt; %s</span></span><br><span class="line"><span class="string">                toString -&gt; %s</span></span><br><span class="line"><span class="string">                hashCode -&gt; %s        </span></span><br><span class="line"><span class="string">                "</span><span class="string">""</span>.formatted(</span><br><span class="line">                        s.name(),</span><br><span class="line">                        s.age(),</span><br><span class="line">                        s.toString(),</span><br><span class="line">                        s.hashCode()</span><br><span class="line">                )</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="NullPointerException-提示改进"><a href="#NullPointerException-提示改进" class="headerlink" title="NullPointerException 提示改进"></a>NullPointerException 提示改进</h3><p>14默认开启 <code>XX:+ShowCodeDetailsInExceptionMessages</code> 来显示详细信息</p><p>&lt;14</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.NullPointerException</span></span><br><span class="line">  <span class="selector-tag">at</span> <span class="selector-tag">com</span><span class="selector-class">.di1shuai</span><span class="selector-class">.java14</span><span class="selector-class">.nullexception</span><span class="selector-class">.NullPointerExceptionDemo</span><span class="selector-class">.main</span>(<span class="selector-tag">NullPointerExceptionDemo</span><span class="selector-class">.java</span><span class="selector-pseudo">:21)</span></span><br></pre></td></tr></table></figure><p>14</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">Exception</span> <span class="selector-tag">in</span> <span class="selector-tag">thread</span> "<span class="selector-tag">main</span>" <span class="selector-tag">java</span><span class="selector-class">.lang</span><span class="selector-class">.NullPointerException</span>: <span class="selector-tag">Cannot</span> <span class="selector-tag">invoke</span> "<span class="selector-tag">String</span><span class="selector-class">.toString</span>()" <span class="selector-tag">because</span> "<span class="selector-tag">str</span>" <span class="selector-tag">is</span> <span class="selector-tag">null</span></span><br><span class="line">  <span class="selector-tag">at</span> <span class="selector-tag">com</span><span class="selector-class">.di1shuai</span><span class="selector-class">.java14</span><span class="selector-class">.nullexception</span><span class="selector-class">.NullPointerExceptionDemo</span><span class="selector-class">.main</span>(<span class="selector-tag">NullPointerExceptionDemo</span><span class="selector-class">.java</span><span class="selector-pseudo">:12)</span></span><br></pre></td></tr></table></figure><h3 id="其他-5"><a href="#其他-5" class="headerlink" title="其他"></a><strong>其他</strong></h3><ul><li>G1 的 NUMA 可识别内存分配</li><li>删除 CMS 垃圾回收器</li><li>GC 支持 MacOS 和 Windows 系统</li></ul><h2 id="15"><a href="#15" class="headerlink" title="15"></a>15</h2><p><img src="https://images.di1shuai.com/2021-01-23-15.png" alt></p><h3 id="EdDSA-数字签名算法"><a href="#EdDSA-数字签名算法" class="headerlink" title="EdDSA 数字签名算法"></a>EdDSA 数字签名算法</h3><ul><li>使用 Edwards-Curve 数字签名算法（EdDSA）实现加密签名。</li><li>与其它签名方案相比，EdDSA 具有更高的安全性和性能。</li><li>得到许多其它加密库（如 OpenSSL、BoringSSL）的支持。</li></ul><h3 id="Sealed-Classes（封闭类，预览）"><a href="#Sealed-Classes（封闭类，预览）" class="headerlink" title="Sealed Classes（封闭类，预览）"></a>Sealed Classes（封闭类，预览）</h3><p>封闭类 <code>sealed</code> class<br><code>permits</code>可以允许三种类型的子类进行继承</p><ol><li>final 类</li><li>non-sealed 不封闭类</li><li>sealed 类</li></ol><p>封闭父类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> sealed <span class="class"><span class="keyword">class</span> <span class="title">SealedDemo</span></span></span><br><span class="line"><span class="class">        <span class="title">permits</span> <span class="title">FinalClass</span>, <span class="title">NonSealedClass</span>, <span class="title">SealedClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>final</code></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FinalClass</span> <span class="keyword">extends</span> <span class="title">SealedDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>non-sealed</code></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">non-<span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">NonSealedClass</span> <span class="keyword">extends</span> <span class="title">SealedDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>sealed</code></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">SealedClass</span> <span class="keyword">extends</span> <span class="title">SealedDemo</span> <span class="title">permits</span> <span class="title">SealedClass</span>.<span class="title">SubSealed</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    non-<span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">SubSealed</span> <span class="keyword">extends</span> <span class="title">SealedClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Hidden-Classes（隐藏类）"><a href="#Hidden-Classes（隐藏类）" class="headerlink" title="Hidden Classes（隐藏类）"></a>Hidden Classes（隐藏类）</h3><p>隐藏类天生为框架设计的。</p><p>隐藏类只能通过反射访问，不能直接被其他类的字节码</p><h3 id="其他-6"><a href="#其他-6" class="headerlink" title="其他"></a>其他</h3><ul><li>Disable and Deprecate Biased Locking（准备禁用偏向锁）</li><li>instanceof 自动匹配模式（二次预览）</li><li>ZGC，一个可伸缩、低延迟的垃圾回收器。（转正）</li><li>Text Blocks，文本功能转正（JDK 13和14预览，14终于转正）</li><li>Remove the Solaris and SPARC Ports（删除 Solaris 和 SPARC 端口）</li><li>外部存储器访问 API（允许Java 应用程序安全有效地访问 Java 堆之外的外部内存。）</li><li>Record类型二次预览（在Java 14就预览过啦）</li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/BestBurning/java-versions" target="_blank" rel="noopener">源码</a>已发布在Github上，欢迎Star</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JDK各版本特性&quot;&gt;&lt;a href=&quot;#JDK各版本特性&quot; class=&quot;headerlink&quot; title=&quot;JDK各版本特性&quot;&gt;&lt;/a&gt;JDK各版本特性&lt;/h1&gt;&lt;h2 id=&quot;历史版本主要特性&quot;&gt;&lt;a href=&quot;#历史版本主要特性&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="Java" scheme="https://di1shuai.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Kafka——分区策略</title>
    <link href="https://di1shuai.com/Kafka%E2%80%94%E2%80%94%E5%88%86%E5%8C%BA%E7%AD%96%E7%95%A5.html"/>
    <id>https://di1shuai.com/Kafka%E2%80%94%E2%80%94%E5%88%86%E5%8C%BA%E7%AD%96%E7%95%A5.html</id>
    <published>2020-07-09T15:50:04.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h1><h2 id="Partitioner-分区器"><a href="#Partitioner-分区器" class="headerlink" title="Partitioner 分区器"></a>Partitioner 分区器</h2><h3 id="DefaultPartitioner-默认分区器"><a href="#DefaultPartitioner-默认分区器" class="headerlink" title="DefaultPartitioner 默认分区器"></a>DefaultPartitioner 默认分区器</h3><ul><li>Key == Null</li></ul><p>Kafka <code>2.4</code>之前的无Key策略是循环使用主题的所有分区，将消息以轮询的方式发送到每一个分区上,<code>2.4</code>之后增加了默认的粘性策略即：</p><p>对于同一批的数据，会用一个随机值对可用partition数量进行取模，然后把这个partition缓存起来</p><ul><li>Key ≠ Null</li></ul><p>Hash key后，对partition数量进行取模</p><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> partition(<span class="keyword">String</span> topic, <span class="keyword">Object</span> <span class="built_in">key</span>, <span class="built_in">byte</span>[] keyBytes, <span class="keyword">Object</span> value, <span class="built_in">byte</span>[] valueBytes, Cluster cluster,</span><br><span class="line">                     <span class="built_in">int</span> numPartitions) &#123;</span><br><span class="line">    <span class="keyword">if</span> (keyBytes == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> stickyPartitionCache.partition(topic, cluster);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// hash the keyBytes to choose a partition</span></span><br><span class="line">    <span class="keyword">return</span> Utils.toPositive(Utils.murmur2(keyBytes)) % numPartitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/huxi2b/p/12540092.html" target="_blank" rel="noopener">【译】Kafka Producer Sticky Partitioner</a></p><h3 id="RoundRobinPartitioner-轮询分区器"><a href="#RoundRobinPartitioner-轮询分区器" class="headerlink" title="RoundRobinPartitioner 轮询分区器"></a>RoundRobinPartitioner 轮询分区器</h3><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> partition(<span class="keyword">String</span> topic, <span class="keyword">Object</span> <span class="built_in">key</span>, <span class="built_in">byte</span>[] keyBytes, <span class="keyword">Object</span> value, <span class="built_in">byte</span>[] valueBytes, Cluster cluster) &#123;</span><br><span class="line">    List&lt;PartitionInfo&gt; partitions = cluster.partitionsForTopic(topic);</span><br><span class="line">    <span class="built_in">int</span> numPartitions = partitions.<span class="built_in">size</span>();</span><br><span class="line">    <span class="built_in">int</span> nextValue = nextValue(topic);</span><br><span class="line">    List&lt;PartitionInfo&gt; availablePartitions = cluster.availablePartitionsForTopic(topic);</span><br><span class="line">    <span class="keyword">if</span> (!availablePartitions.isEmpty()) &#123;</span><br><span class="line">        <span class="built_in">int</span> part = Utils.toPositive(nextValue) % availablePartitions.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> availablePartitions.<span class="built_in">get</span>(part).partition();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// no partitions are available, give a non-available partition</span></span><br><span class="line">        <span class="keyword">return</span> Utils.toPositive(nextValue) % numPartitions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">int</span> nextValue(<span class="keyword">String</span> topic) &#123;</span><br><span class="line">    AtomicInteger counter = topicCounterMap.computeIfAbsent(topic, k -&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> counter.getAndIncrement();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="UniformStickyPartitioner-粘滞分区器"><a href="#UniformStickyPartitioner-粘滞分区器" class="headerlink" title="UniformStickyPartitioner 粘滞分区器"></a>UniformStickyPartitioner 粘滞分区器</h3><figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> partition(<span class="keyword">String</span> topic, <span class="keyword">Object</span> <span class="built_in">key</span>, <span class="built_in">byte</span>[] keyBytes, <span class="keyword">Object</span> value, <span class="built_in">byte</span>[] valueBytes, Cluster cluster) &#123;</span><br><span class="line">    <span class="keyword">return</span> stickyPartitionCache.partition(topic, cluster);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h1><h2 id="Consumer-Assignor"><a href="#Consumer-Assignor" class="headerlink" title="Consumer  Assignor"></a>Consumer  Assignor</h2><p>当ConsumerGroupLeader收到来自CoordinatorGroup的member信息之后，会进行分区，分区策略主要有:</p><h3 id="RangeAssignor-范围分区-默认"><a href="#RangeAssignor-范围分区-默认" class="headerlink" title="RangeAssignor 范围分区  默认"></a>RangeAssignor 范围分区  默认</h3><p>先用 <code>partition</code> / <code>consumer</code> = 每个消费者至少要消费的分区个数</p><p>再用 <code>partition</code>% <code>consumer</code> = 字典序前多少个消费者需要多消费一个 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> numPartitionsPerConsumer = numPartitionsForTopic / consumersForTopic.size();</span><br><span class="line"><span class="keyword">int</span> consumersWithExtraPartition = numPartitionsForTopic % consumersForTopic.size();</span><br><span class="line"></span><br><span class="line">List&lt;TopicPartition&gt; partitions = AbstractPartitionAssignor.partitions(topic, numPartitionsForTopic);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, n = consumersForTopic.size(); i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> start = numPartitionsPerConsumer * i + Math.min(i, consumersWithExtraPartition);</span><br><span class="line">    <span class="keyword">int</span> length = numPartitionsPerConsumer + (i + <span class="number">1</span> &gt; consumersWithExtraPartition ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    assignment.get(consumersForTopic.get(i).memberId).addAll(partitions.subList(start, start + length));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是当消费多个topic，并且每个topic的partition对cunsumer取余后都多一些，那么会导致靠前的消费者消费较多分区，靠后的消费者消费较少分区，出现分区不均匀</p><h3 id="RoundRobin-轮询分区"><a href="#RoundRobin-轮询分区" class="headerlink" title="RoundRobin 轮询分区"></a>RoundRobin 轮询分区</h3><p>先将所有消费的的partition装在List里面，然后用一个装了consumer环形迭代器去碰撞</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">CircularIterator&lt;MemberInfo&gt; assigner = <span class="keyword">new</span> CircularIterator&lt;&gt;(Utils.sorted(memberInfoList));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (TopicPartition partition : allPartitionsSorted(partitionsPerTopic, subscriptions)) &#123;</span><br><span class="line">    <span class="keyword">final</span> String topic = partition.topic();</span><br><span class="line">    <span class="keyword">while</span> (!subscriptions.get(assigner.peek().memberId).topics().contains(topic))</span><br><span class="line">        assigner.next();</span><br><span class="line">    assignment.get(assigner.next().memberId).add(partition);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;TopicPartition&gt; <span class="title">allPartitionsSorted</span><span class="params">(Map&lt;String, Integer&gt; partitionsPerTopic,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                     Map&lt;String, Subscription&gt; subscriptions)</span> </span>&#123;</span><br><span class="line">    SortedSet&lt;String&gt; topics = <span class="keyword">new</span> TreeSet&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Subscription subscription : subscriptions.values())</span><br><span class="line">        topics.addAll(subscription.topics());</span><br><span class="line"></span><br><span class="line">    List&lt;TopicPartition&gt; allPartitions = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String topic : topics) &#123;</span><br><span class="line">        Integer numPartitionsForTopic = partitionsPerTopic.get(topic);</span><br><span class="line">        <span class="keyword">if</span> (numPartitionsForTopic != <span class="keyword">null</span>)</span><br><span class="line">            allPartitions.addAll(AbstractPartitionAssignor.partitions(topic, numPartitionsForTopic));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> allPartitions;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StickyAssignor-粘性分配"><a href="#StickyAssignor-粘性分配" class="headerlink" title="StickyAssignor 粘性分配"></a>StickyAssignor 粘性分配</h3><p>从 <code>0.11</code> 版本开始 </p><p>目标：</p><p>主题分区仍然尽可能均匀地<strong>分布</strong> </p><p>主题分区尽可能与其<strong>先前</strong>分配的使用者<strong>在一起</strong></p><p><a href="https://my.oschina.net/u/4262150/blog/3274346" target="_blank" rel="noopener">深入分析Kafka架构（三）：消费者消费方式、三种分区分配策略、offset维护 - osc_8vayftu3的个人空间 - OSCHINA</a></p><h3 id="CooperativeStickyAssignor"><a href="#CooperativeStickyAssignor" class="headerlink" title="CooperativeStickyAssignor"></a>CooperativeStickyAssignor</h3><p>从 <code>2.4</code> 版本开始</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Producer&quot;&gt;&lt;a href=&quot;#Producer&quot; class=&quot;headerlink&quot; title=&quot;Producer&quot;&gt;&lt;/a&gt;Producer&lt;/h1&gt;&lt;h2 id=&quot;Partitioner-分区器&quot;&gt;&lt;a href=&quot;#Partitioner-分区
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="BigData" scheme="https://di1shuai.com/tags/BigData/"/>
    
      <category term="Kafka" scheme="https://di1shuai.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Kafka——Rebalance过程</title>
    <link href="https://di1shuai.com/Kafka%E2%80%94%E2%80%94Rebalance%E8%BF%87%E7%A8%8B.html"/>
    <id>https://di1shuai.com/Kafka%E2%80%94%E2%80%94Rebalance%E8%BF%87%E7%A8%8B.html</id>
    <published>2020-07-08T15:35:05.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Rebalance（重平衡 ）本质上是一种协议， 规定了一个Consumer Group下的所有 Consumer 如何达成一致， 来分配订阅Topic的每个分区。 说简单点就是 给消费组每个消费者分配消费任务的过程。</p></blockquote><h3 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h3><ul><li>订阅信息变化(partition变化，topic变化)</li><li>ConsumerGroup组内成员变化 (心跳超时/Consumer 加入/Consumer退出)</li></ul><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a><strong>过程</strong></h3><ol><li>FindCoordinator - 寻找管理当前Group的GroupCoordinator的Node信息</li><li>JoinGroup - 向GroupCoordinator发送加入信息</li><li>SyncGroup - Group Leader 上传分区信息到Coordinator，Coordinator下发分区信息到每个Consumer</li></ol><p><strong>Server</strong>                           <strong>Client</strong>                      </p><ul><li><p>FindCoordinator</p><p>  ←  FindCoordinatorRequest  </p><p>  <code>key</code> - <code>groupId</code> </p><p>  <code>keyType</code> - <code>Group</code></p><p>  向负载最小的Broker节点发送请求</p>  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">leastLoadedNode</span><span class="params">(<span class="keyword">long</span> now)</span> </span>&#123;</span><br><span class="line">        List&lt;Node&gt; nodes = <span class="keyword">this</span>.metadataUpdater.fetchNodes();</span><br><span class="line">        <span class="keyword">if</span> (nodes.isEmpty())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"There are no nodes in the Kafka cluster"</span>);</span><br><span class="line">        <span class="keyword">int</span> inflight = Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">        Node foundConnecting = <span class="keyword">null</span>;</span><br><span class="line">        Node foundCanConnect = <span class="keyword">null</span>;</span><br><span class="line">        Node foundReady = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> offset = <span class="keyword">this</span>.randOffset.nextInt(nodes.size());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodes.size(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> idx = (offset + i) % nodes.size();</span><br><span class="line">            Node node = nodes.get(idx);</span><br><span class="line">            <span class="keyword">if</span> (canSendRequest(node.idString(), now)) &#123;</span><br><span class="line">                <span class="keyword">int</span> currInflight = <span class="keyword">this</span>.inFlightRequests.count(node.idString());</span><br><span class="line">                <span class="keyword">if</span> (currInflight == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// if we find an established connection with no in-flight requests we can stop right away</span></span><br><span class="line">                    log.trace(<span class="string">"Found least loaded node &#123;&#125; connected with no in-flight requests"</span>, node);</span><br><span class="line">                    <span class="keyword">return</span> node;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (currInflight &lt; inflight) &#123;</span><br><span class="line">                    <span class="comment">// otherwise if this is the best we have found so far, record that</span></span><br><span class="line">                    inflight = currInflight;</span><br><span class="line">                    foundReady = node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (connectionStates.isPreparingConnection(node.idString())) &#123;</span><br><span class="line">                foundConnecting = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (canConnect(node, now)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (foundCanConnect == <span class="keyword">null</span> ||</span><br><span class="line">                        <span class="keyword">this</span>.connectionStates.lastConnectAttemptMs(foundCanConnect.idString()) &gt;</span><br><span class="line">                                <span class="keyword">this</span>.connectionStates.lastConnectAttemptMs(node.idString())) &#123;</span><br><span class="line">                    foundCanConnect = node;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.trace(<span class="string">"Removing node &#123;&#125; from least loaded node selection since it is neither ready "</span> +</span><br><span class="line">                        <span class="string">"for sending or connecting"</span>, node);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We prefer established connections if possible. Otherwise, we will wait for connections</span></span><br><span class="line">        <span class="comment">// which are being established before connecting to new nodes.</span></span><br><span class="line">        <span class="keyword">if</span> (foundReady != <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.trace(<span class="string">"Found least loaded node &#123;&#125; with &#123;&#125; inflight requests"</span>, foundReady, inflight);</span><br><span class="line">            <span class="keyword">return</span> foundReady;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (foundConnecting != <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.trace(<span class="string">"Found least loaded connecting node &#123;&#125;"</span>, foundConnecting);</span><br><span class="line">            <span class="keyword">return</span> foundConnecting;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (foundCanConnect != <span class="keyword">null</span>) &#123;</span><br><span class="line">            log.trace(<span class="string">"Found least loaded node &#123;&#125; with no active connection"</span>, foundCanConnect);</span><br><span class="line">            <span class="keyword">return</span> foundCanConnect;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.trace(<span class="string">"Least loaded node selection failed to find an available node"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>  →  FindCoordinatorResponse  </p><p>  <code>host</code> <code>port</code> <code>nodeId</code></p><p>  Hash( <code>groupId</code> ) % <code>__consumer_offsets</code> Topic <code>partitions</code> 的 <code>leader</code> 节点</p></li><li><p>JoinGroup</p><p>  ←   JoinGroupRequest    向Coordinator发送</p><p>  <code>groupId</code></p><p>  <code>memberId</code> - </p><p>  <code>groupInstanceId</code> - 静态ID</p><p>  <code>protocols</code> - <code>assignors</code></p><p>  <code>isLeader</code> = <code>false</code></p><p>  清空<code>subscriptions</code> 中的topic信息</p><p>  →   JoinGroupResponse</p><p>  <code>leader</code></p><p>  <code>memberId</code></p><p>  <code>members</code> - 成员信息，只有Leader才会有值，Follower是空列表</p><p>  第一个加入的 <code>memeberId</code> 成为Leader</p><p>  Coordinator会等待一段时间，取决于Consumer的<code>max.poll.interval.ms</code></p><p>  Group状态变为  <code>PreparingRebalance</code> ，Request会被阻塞，直到所有的member都发来JoinGroupRequest后，执行回调并修改Group状态为<code>CompletingRebalance</code></p></li><li><p>SyncGroup</p><p>  ← SyncGroupRequest</p><p>  <code>groupId</code> </p><p>  <code>generationId</code> - 年代信息</p><p>  <code>memberId</code></p><p>  <code>groupInstanceId</code></p><p>  <code>assignments</code>  -   <code>memberId - topicPartitions</code></p><p>  Leader进行分区，并将分区结果发送给Coordinator</p><p>  → SyncGroupResponse</p><p>  <code>assignment</code> - 分区结果</p><p>  Leader的分区结果没有到的时候，Group状态为<code>CompletingRebalance</code>，SyncGroupRequest被阻塞，直到Leader的分区结果到了之后,Group状态变为 <code>Stable</code>,执行回调下发分区信息</p><p>  之后Consumer根据传回来的分区结果去更新自己的订阅信息</p></li></ul><h3 id="Heartbeat"><a href="#Heartbeat" class="headerlink" title="Heartbeat"></a>Heartbeat</h3><p>心跳机制，主要用于确认双方是否存活，以及Group状态信息</p><p>Server</p><p>← HeartbeatRequest</p><p><code>groupId</code><br><code>generationId</code><br><code>memberId</code><br><code>groupInstanceId</code></p><p>→ HeartbeatResponse</p><p><code>errorCode</code></p><p><strong>Server</strong></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line">group.currentState <span class="keyword">match</span> &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="type">Empty</span> =&gt;</span><br><span class="line">    responseCallback(<span class="type">Errors</span>.<span class="type">UNKNOWN_MEMBER_ID</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="type">CompletingRebalance</span> =&gt;</span><br><span class="line">      responseCallback(<span class="type">Errors</span>.<span class="type">REBALANCE_IN_PROGRESS</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="type">PreparingRebalance</span> =&gt;</span><br><span class="line">      <span class="keyword">val</span> member = group.get(memberId)</span><br><span class="line">      completeAndScheduleNextHeartbeatExpiration(group, member)</span><br><span class="line">      responseCallback(<span class="type">Errors</span>.<span class="type">REBALANCE_IN_PROGRESS</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="type">Stable</span> =&gt;</span><br><span class="line">      <span class="keyword">val</span> member = group.get(memberId)</span><br><span class="line">      completeAndScheduleNextHeartbeatExpiration(group, member)</span><br><span class="line">      responseCallback(<span class="type">Errors</span>.<span class="type">NONE</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">case</span> <span class="type">Dead</span> =&gt;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">IllegalStateException</span>(<span class="string">s"Reached unexpected condition for Dead group <span class="subst">$groupId</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果Group状态为 <code>Stable</code> error为 <code>None</code> ，为其他，则有错误码</p><p>如果心跳超时，则会更新<code>group</code> <code>member</code>信息，踢掉超时的<code>member</code> ，并修改Group状态为<code>PreparingRebalance</code></p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">onExpireHeartbeat</span></span>(group: <span class="type">GroupMetadata</span>, memberId: <span class="type">String</span>, isPending: <span class="type">Boolean</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  group.inLock &#123;</span><br><span class="line">    <span class="keyword">if</span> (group.is(<span class="type">Dead</span>)) &#123;</span><br><span class="line">      info(<span class="string">s"Received notification of heartbeat expiration for member <span class="subst">$memberId</span> after group <span class="subst">$&#123;group.groupId&#125;</span> had already been unloaded or deleted."</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isPending) &#123;</span><br><span class="line">      info(<span class="string">s"Pending member <span class="subst">$memberId</span> in group <span class="subst">$&#123;group.groupId&#125;</span> has been removed after session timeout expiration."</span>)</span><br><span class="line">      removePendingMemberAndUpdateGroup(group, memberId)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!group.has(memberId)) &#123;</span><br><span class="line">      debug(<span class="string">s"Member <span class="subst">$memberId</span> has already been removed from the group."</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">val</span> member = group.get(memberId)</span><br><span class="line">      <span class="keyword">if</span> (!member.hasSatisfiedHeartbeat) &#123;</span><br><span class="line">        info(<span class="string">s"Member <span class="subst">$&#123;member.memberId&#125;</span> in group <span class="subst">$&#123;group.groupId&#125;</span> has failed, removing it from the group"</span>)</span><br><span class="line">        removeMemberAndUpdateGroup(group, member, <span class="string">s"removing member <span class="subst">$&#123;member.memberId&#125;</span> on heartbeat expiration"</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">def</span> <span class="title">removeMemberAndUpdateGroup</span></span>(group: <span class="type">GroupMetadata</span>, member: <span class="type">MemberMetadata</span>, reason: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="comment">// New members may timeout with a pending JoinGroup while the group is still rebalancing, so we have</span></span><br><span class="line">  <span class="comment">// to invoke the callback before removing the member. We return UNKNOWN_MEMBER_ID so that the consumer</span></span><br><span class="line">  <span class="comment">// will retry the JoinGroup request if is still active.</span></span><br><span class="line">  group.maybeInvokeJoinCallback(member, <span class="type">JoinGroupResult</span>(<span class="type">JoinGroupRequest</span>.<span class="type">UNKNOWN_MEMBER_ID</span>, <span class="type">Errors</span>.<span class="type">UNKNOWN_MEMBER_ID</span>))</span><br><span class="line"></span><br><span class="line">  group.remove(member.memberId)</span><br><span class="line">  group.removeStaticMember(member.groupInstanceId)</span><br><span class="line"></span><br><span class="line">  group.currentState <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Dead</span> | <span class="type">Empty</span> =&gt;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">Stable</span> | <span class="type">CompletingRebalance</span> =&gt; maybePrepareRebalance(group, reason)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">PreparingRebalance</span> =&gt; joinPurgatory.checkAndComplete(<span class="type">GroupKey</span>(group.groupId))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Consumer</strong></p><p>Consumer收到返回结果后，会查看是否有错误信息，如果收到正在Rebalance的错误，就会将ReJoin的标志位置为<code>True</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(HeartbeatResponse heartbeatResponse, RequestFuture&lt;Void&gt; future)</span> </span>&#123;</span><br><span class="line">    sensors.heartbeatSensor.record(response.requestLatencyMs());</span><br><span class="line">    Errors error = heartbeatResponse.error();</span><br><span class="line">    <span class="keyword">if</span> (error == Errors.NONE) &#123;</span><br><span class="line">        log.debug(<span class="string">"Received successful Heartbeat response"</span>);</span><br><span class="line">        future.complete(<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == Errors.COORDINATOR_NOT_AVAILABLE</span><br><span class="line">            || error == Errors.NOT_COORDINATOR) &#123;</span><br><span class="line">        log.info(<span class="string">"Attempt to heartbeat failed since coordinator &#123;&#125; is either not started or not valid"</span>,</span><br><span class="line">                coordinator());</span><br><span class="line">        markCoordinatorUnknown();</span><br><span class="line">        future.raise(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == Errors.REBALANCE_IN_PROGRESS) &#123;</span><br><span class="line">        log.info(<span class="string">"Attempt to heartbeat failed since group is rebalancing"</span>);</span><br><span class="line">        requestRejoin();</span><br><span class="line">        future.raise(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == Errors.ILLEGAL_GENERATION ||</span><br><span class="line">               error == Errors.UNKNOWN_MEMBER_ID ||</span><br><span class="line">               error == Errors.FENCED_INSTANCE_ID) &#123;</span><br><span class="line">        <span class="keyword">if</span> (generationUnchanged()) &#123;</span><br><span class="line">            log.info(<span class="string">"Attempt to heartbeat with &#123;&#125; and group instance id &#123;&#125; failed due to &#123;&#125;, resetting generation"</span>,</span><br><span class="line">                sentGeneration, rebalanceConfig.groupInstanceId, error);</span><br><span class="line">            resetGenerationOnResponseError(ApiKeys.HEARTBEAT, error);</span><br><span class="line">            future.raise(error);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// if the generation has changed, then ignore this error</span></span><br><span class="line">            log.info(<span class="string">"Attempt to heartbeat with stale &#123;&#125; and group instance id &#123;&#125; failed due to &#123;&#125;, ignoring the error"</span>,</span><br><span class="line">                sentGeneration, rebalanceConfig.groupInstanceId, error);</span><br><span class="line">            future.complete(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (error == Errors.GROUP_AUTHORIZATION_FAILED) &#123;</span><br><span class="line">        future.raise(GroupAuthorizationException.forGroupId(rebalanceConfig.groupId));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        future.raise(<span class="keyword">new</span> KafkaException(<span class="string">"Unexpected error in heartbeat response: "</span> + error.message()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">requestRejoin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.rejoinNeeded = <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Server-Request-Handle"><a href="#Server-Request-Handle" class="headerlink" title="Server Request Handle"></a>Server Request Handle</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> ApiKeys.FIND_COORDINATOR =&gt; handleFindCoordinatorRequest(request)</span><br><span class="line"><span class="keyword">case</span> ApiKeys.JOIN_GROUP =&gt; handleJoinGroupRequest(request)</span><br><span class="line"><span class="keyword">case</span> ApiKeys.HEARTBEAT =&gt; handleHeartbeatRequest(request)</span><br><span class="line"><span class="keyword">case</span> ApiKeys.LEAVE_GROUP =&gt; handleLeaveGroupRequest(request)</span><br><span class="line"><span class="keyword">case</span> ApiKeys.SYNC_GROUP =&gt; handleSyncGroupRequest(request)</span><br><span class="line"><span class="keyword">case</span> ApiKeys.DESCRIBE_GROUPS =&gt; handleDescribeGroupRequest(request)</span><br></pre></td></tr></table></figure><h3 id="Server-Group-State"><a href="#Server-Group-State" class="headerlink" title="Server Group State"></a>Server Group State</h3><p><code>PreparingRebalance</code> Group is preparing to rebalance</p><p><code>CompletingRebalance</code> Group is awaiting state assignment from the leader</p><p><code>Stable</code> Group is stable</p><p><code>Dead</code> Group has no more members and its metadata is being removed</p><p><code>Empty</code> Group has no more members, but lingers until all offsets have expired.</p><h3 id="Client-Member-State"><a href="#Client-Member-State" class="headerlink" title="Client Member State"></a>Client Member State</h3><p><code>UNJOINED</code>     the client is not part of a group<br><code>REBALANCING</code> the client has begun rebalancing<br><code>STABLE</code> the client has joined and is sending heartbeats</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Rebalance（重平衡 ）本质上是一种协议， 规定了一个Consumer Group下的所有 Consumer 如何达成一致， 来分配订阅Topic的每个分区。 说简单点就是 给消费组每个消费者分配消费任务的过程。&lt;/p&gt;
&lt;/blockquo
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="BigData" scheme="https://di1shuai.com/tags/BigData/"/>
    
      <category term="Kafka" scheme="https://di1shuai.com/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>Flink数据从Source流入方式</title>
    <link href="https://di1shuai.com/Flink%E6%95%B0%E6%8D%AE%E4%BB%8ESource%E6%B5%81%E5%85%A5%E6%96%B9%E5%BC%8F.html"/>
    <id>https://di1shuai.com/Flink%E6%95%B0%E6%8D%AE%E4%BB%8ESource%E6%B5%81%E5%85%A5%E6%96%B9%E5%BC%8F.html</id>
    <published>2020-06-28T15:50:04.000Z</published>
    <updated>2021-04-03T23:26:31.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Source"><a href="#Source" class="headerlink" title="Source"></a>Source</h2><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorReader</span>(<span class="params">id: <span class="type">String</span>, timestamp: <span class="type">Long</span>, temperature: <span class="type">Double</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">val</span> <span class="title">dataList</span> </span>= <span class="type">List</span>(</span><br><span class="line">      <span class="type">SensorReader</span>(<span class="string">"1"</span>, now, <span class="number">36.5</span>),</span><br><span class="line">      <span class="type">SensorReader</span>(<span class="string">"2"</span>, now - <span class="number">30</span> * <span class="number">1000</span>, <span class="number">39</span>),</span><br><span class="line">      <span class="type">SensorReader</span>(<span class="string">"3"</span>, now - <span class="number">300</span> * <span class="number">1000</span>, <span class="number">37.1</span>),</span><br><span class="line">      <span class="type">SensorReader</span>(<span class="string">"4"</span>, now, <span class="number">36.2</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataStream = env.fromCollection(dataList)</span><br></pre></td></tr></table></figure><h3 id="任意类型元素"><a href="#任意类型元素" class="headerlink" title="任意类型元素"></a>任意类型元素</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataStream = env.fromElements(<span class="number">1</span>,<span class="number">1.1</span>,<span class="string">"hello"</span>,<span class="literal">true</span>)</span><br><span class="line"><span class="comment">//    val dataStream = env.readTextFile(inputPath)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4 Kafka</span></span><br><span class="line"><span class="comment">//    val consumerProperties = new Properties()</span></span><br><span class="line"><span class="comment">//    consumerProperties.setProperty("bootstrap.servers", "kafka1:9092")</span></span><br><span class="line"><span class="comment">//    consumerProperties.setProperty("group.id", "flink-stream")</span></span><br><span class="line"><span class="comment">//    val topic = "flink-source";</span></span><br><span class="line"><span class="comment">//    val kafkaSource = new FlinkKafkaConsumer[String](topic,new SimpleStringSchema(),consumerProperties)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    val dataStream = env.addSource(kafkaSource)</span></span><br></pre></td></tr></table></figure><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3 文件</span></span><br><span class="line"><span class="keyword">val</span> inputPath: <span class="type">String</span> = <span class="string">"/path/to/file"</span></span><br><span class="line"><span class="keyword">val</span> dataStream = env.readTextFile(inputPath)</span><br></pre></td></tr></table></figure><h3 id="Kafka【重要】"><a href="#Kafka【重要】" class="headerlink" title="Kafka【重要】"></a><strong>Kafka【重要】</strong></h3><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> consumerProperties = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">consumerProperties.setProperty(<span class="string">"bootstrap.servers"</span>, <span class="string">"kafka1:9092"</span>)</span><br><span class="line">consumerProperties.setProperty(<span class="string">"group.id"</span>, <span class="string">"flink-stream"</span>)</span><br><span class="line"><span class="keyword">val</span> topic = <span class="string">"flink-source"</span>;</span><br><span class="line"><span class="keyword">val</span> kafkaSource = <span class="keyword">new</span> <span class="type">FlinkKafkaConsumer</span>[<span class="type">String</span>](topic,<span class="keyword">new</span> <span class="type">SimpleStringSchema</span>(),consumerProperties)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> dataStream = env.addSource(kafkaSource)</span><br></pre></td></tr></table></figure><h3 id="自定义Source"><a href="#自定义Source" class="headerlink" title="自定义Source"></a>自定义Source</h3><p>场景一：测试</p><p>场景二：其他的数据源</p><figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> dataStream = env.addSource(<span class="keyword">new</span> <span class="type">SensorReaderSource</span>())</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorReader</span>(<span class="params">id: <span class="type">String</span>, timestamp: <span class="type">Long</span>, temperature: <span class="type">Double</span></span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">//继承SourceFunction，实现run</span>(<span class="params"></span>)<span class="title">/cancel</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SensorReaderSource</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">SourceFunction</span>[<span class="type">SensorReader</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> running: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">val</span> random = <span class="type">Random</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> currentTemp = <span class="number">1.</span>to(<span class="number">10</span>).map(i =&gt; <span class="type">SensorReader</span>(<span class="string">"sensor_"</span> + i, <span class="type">System</span>.currentTimeMillis(), random.nextDouble() * <span class="number">5</span> + <span class="number">35</span>)).toList</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getDataList</span></span>(): <span class="type">List</span>[<span class="type">SensorReader</span>] = &#123;</span><br><span class="line">    currentTemp.map(</span><br><span class="line">      s =&gt; <span class="type">SensorReader</span>(s.id,<span class="type">System</span>.currentTimeMillis(),s.temperature+random.nextGaussian())</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(ctx: <span class="type">SourceFunction</span>.<span class="type">SourceContext</span>[<span class="type">SensorReader</span>]): <span class="type">Unit</span> =</span><br><span class="line">    <span class="keyword">while</span> (running) &#123;</span><br><span class="line">      getDataList().foreach(</span><br><span class="line"><span class="comment">// ctx.collect 用于发送数据</span></span><br><span class="line">        data =&gt; ctx.collect(data)</span><br><span class="line">      )</span><br><span class="line">      <span class="type">Thread</span>.sleep(<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">cancel</span></span>(): <span class="type">Unit</span> = running = <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://ci.apache.org/projects/flink/flink-docs-master/dev/stream/sources.html" target="_blank" rel="noopener">Flink Data Sources</a></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>源码放在了<a href="https://github.com/BestBurning" target="_blank" rel="noopener">Github</a>上，见<a href="https://github.com/BestBurning/bigdata/blob/master/flink/flink-scala/src/main/scala/com/di1shuai/flink/scala/SourceDemo.scala" target="_blank" rel="noopener">flink-scala</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Source&quot;&gt;&lt;a href=&quot;#Source&quot; class=&quot;headerlink&quot; title=&quot;Source&quot;&gt;&lt;/a&gt;Source&lt;/h2&gt;&lt;h3 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="BigData" scheme="https://di1shuai.com/tags/BigData/"/>
    
      <category term="Flink" scheme="https://di1shuai.com/tags/Flink/"/>
    
  </entry>
  
  <entry>
    <title>早点睡</title>
    <link href="https://di1shuai.com/%E6%97%A9%E7%82%B9%E7%9D%A1.html"/>
    <id>https://di1shuai.com/%E6%97%A9%E7%82%B9%E7%9D%A1.html</id>
    <published>2020-05-08T10:20:34.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sleep-early"><a href="#sleep-early" class="headerlink" title="sleep_early"></a>sleep_early</h1><p>早点睡</p><h2 id="价值主张"><a href="#价值主张" class="headerlink" title="价值主张"></a>价值主张</h2><p>唯有早睡不可辜负</p><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>无奈最近因为各种事情而导致拖延晚于<code>10:30</code>睡觉，<br>有时是<code>mac</code>或者<code>win10</code>上的代码，<br>有时是<code>ipad</code>里的剧，<br>有时是<code>电话</code>里的女友，<br>所以希望能有个强制性的监督管理机制，强迫自己关机睡觉</p><h2 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h2><ul><li><p>登录<br><img src="http://images.di1shuai.com/FnOnfP0l4o8Hl750YaD5WjrEN-u3" alt="signin.png"></p></li><li><p>注册<br><img src="http://images.di1shuai.com/FlAhErb3gIT_QeU5lS2Y3SRI_gpX" alt="signup.png"></p></li><li><p>设备绑定<br><img src="http://images.di1shuai.com/Fr93OfhIYsOqvjMJqlN0_JcCn4Nn" alt="binding.png"></p></li><li><p>Home<br><img src="http://images.di1shuai.com/FmowEN1OYFXOgkUmCxOCDx7-L_Nr" alt="home.png"></p></li><li><p>Time<br><img src="http://images.di1shuai.com/FgnobyUz49LL-JuikLnqyrk4Hbrp" alt="time.png"></p></li></ul><ul><li>Menu<br><img src="http://images.di1shuai.com/FkMZmxqerfY8yDua1-im_fKQemek" alt="menu.png"></li></ul><h2 id="Done"><a href="#Done" class="headerlink" title="Done"></a>Done</h2><ul><li><input checked disabled type="checkbox"> Home界面</li><li><input checked disabled type="checkbox"> 设备绑定</li><li><input checked disabled type="checkbox"> 全端(os)适配<ul><li><input checked disabled type="checkbox"> android</li><li><input checked disabled type="checkbox"> ios</li><li><input checked disabled type="checkbox"> windows</li><li><input checked disabled type="checkbox"> linux</li><li><input checked disabled type="checkbox"> macos</li></ul></li><li><input checked disabled type="checkbox"> 定时关机<ul><li><input checked disabled type="checkbox"> windows</li><li><input checked disabled type="checkbox"> linux</li><li><input checked disabled type="checkbox"> macos</li></ul></li><li><input checked disabled type="checkbox"> 注册<ul><li><input checked disabled type="checkbox"> email</li></ul></li><li><input checked disabled type="checkbox"> 登录<ul><li><input checked disabled type="checkbox"> email </li></ul></li></ul><h2 id="Plan"><a href="#Plan" class="headerlink" title="Plan"></a>Plan</h2><p>全部计划请移步<a href="https://github.com/orgs/di1shuai/projects/1" target="_blank" rel="noopener">SleepEarly</a>查看</p><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><ul><li>Android</li><li>IOS</li><li>Windows</li><li>Macos</li><li>Linux</li></ul><h2 id="反馈"><a href="#反馈" class="headerlink" title="反馈"></a>反馈</h2><p><a href="https://support.qq.com/products/156063" target="_blank" rel="noopener">吐个槽</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sleep-early&quot;&gt;&lt;a href=&quot;#sleep-early&quot; class=&quot;headerlink&quot; title=&quot;sleep_early&quot;&gt;&lt;/a&gt;sleep_early&lt;/h1&gt;&lt;p&gt;早点睡&lt;/p&gt;
&lt;h2 id=&quot;价值主张&quot;&gt;&lt;a href=&quot;#价值
      
    
    </summary>
    
    
      <category term="products" scheme="https://di1shuai.com/categories/products/"/>
    
    
      <category term="application" scheme="https://di1shuai.com/tags/application/"/>
    
      <category term="Flutter" scheme="https://di1shuai.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>shutdown_platform</title>
    <link href="https://di1shuai.com/shutdown_platform.html"/>
    <id>https://di1shuai.com/shutdown_platform.html</id>
    <published>2020-04-23T00:00:00.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<p>The plugin for <code>go-flutter</code> to shutdown platform <code>windows</code>、<code>linux</code>、<code>mac</code> only</p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>Add this to your package’s pubspec.yaml file:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">dependencies</span>:</span><br><span class="line">  <span class="selector-tag">platform_device_id</span>: ^0<span class="selector-class">.1</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>a simple usage example:</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:shutdown_platform/shutdown_platform.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> out = <span class="keyword">await</span> ShutdownPlatform.shutdownNow;</span><br></pre></td></tr></table></figure><h2 id="Use-go-flutter"><a href="#Use-go-flutter" class="headerlink" title="Use go-flutter"></a>Use go-flutter</h2><h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><p>Import as:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> shutdown_platform <span class="string">"github.com/BestBurning/shutdown_platform/go"</span></span><br></pre></td></tr></table></figure><p>Then add the following option to your go-flutter <a href="https://github.com/go-flutter-desktop/go-flutter/wiki/Plugin-info" target="_blank" rel="noopener">application options</a>:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">flutter.AddPlugin(&amp;shutdown_platform.ShutdownPlatformPlugin&#123;&#125;),</span><br></pre></td></tr></table></figure><h2 id="Pub-Dev"><a href="#Pub-Dev" class="headerlink" title="Pub Dev"></a>Pub Dev</h2><p>it’s published to <a href="https://pub.dev/packages/shutdown_platform#-readme-tab-" target="_blank" rel="noopener">pub.dev</a></p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p><a href="https://github.com/BestBurning/shutdown_platform" target="_blank" rel="noopener">shutdown_platform</a> open source with <a href="https://github.com/BestBurning" target="_blank" rel="noopener">Github</a><br>and the licenses is <a href="https://opensource.org/licenses/BSD-3-Clause" target="_blank" rel="noopener">BSD-3-Clause</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The plugin for &lt;code&gt;go-flutter&lt;/code&gt; to shutdown platform &lt;code&gt;windows&lt;/code&gt;、&lt;code&gt;linux&lt;/code&gt;、&lt;code&gt;mac&lt;/code&gt; only&lt;/p&gt;
&lt;h2 id=&quot;Get
      
    
    </summary>
    
    
      <category term="products" scheme="https://di1shuai.com/categories/products/"/>
    
    
      <category term="go-flutter-plugin" scheme="https://di1shuai.com/tags/go-flutter-plugin/"/>
    
      <category term="Flutter" scheme="https://di1shuai.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>platform_device_id</title>
    <link href="https://di1shuai.com/platform_device_id.html"/>
    <id>https://di1shuai.com/platform_device_id.html</id>
    <published>2020-04-22T00:00:00.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<p>Get device id from android、ios、windows、linux、mac</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><ul><li>Windows </li></ul><p><code>BIOS UUID</code> e.g. <code>99A4D301-53F5-11CB-8CA0-9CA39A9E1F01</code></p><ul><li>Linux </li></ul><p><code>BIOS UUID</code> e.g. <code>32a70060-2a39-437e-88e2-d68e6154de9f</code></p><ul><li>Mac </li></ul><p><code>IOPlatformUUID</code> e.g. <code>02662E79-E342-521C-98EA-D4C18B61FEF3</code></p><ul><li>Android </li></ul><p><code>androidid</code> </p><ul><li>IOS </li></ul><p><code>identifierForVendor</code></p><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><h3 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h3><p>Add this to your package’s pubspec.yaml file:</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">dependencies</span>:</span><br><span class="line">  <span class="selector-tag">platform_device_id</span>: ^0<span class="selector-class">.1</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><p>a simple usage example:</p><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:platform_device_id/platform_device_id.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span> deviceId = <span class="keyword">await</span> PlatformDeviceId.getDeviceId;</span><br></pre></td></tr></table></figure><h2 id="Use-go-flutter"><a href="#Use-go-flutter" class="headerlink" title="Use go-flutter"></a>Use go-flutter</h2><h3 id="Usage-1"><a href="#Usage-1" class="headerlink" title="Usage"></a>Usage</h3><p>Import as:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> platform_device_id <span class="string">"github.com/BestBurning/platform_device_id/go"</span></span><br></pre></td></tr></table></figure><p>Then add the following option to your go-flutter <a href="https://github.com/go-flutter-desktop/go-flutter/wiki/Plugin-info" target="_blank" rel="noopener">application options</a>:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">flutter.AddPlugin(&amp;platform_device_id.PlatformDeviceIdPlugin&#123;&#125;),</span><br></pre></td></tr></table></figure><h2 id="Pub-Dev"><a href="#Pub-Dev" class="headerlink" title="Pub Dev"></a>Pub Dev</h2><p>it’s published to <a href="https://pub.dev/packages/platform_device_id#-readme-tab-" target="_blank" rel="noopener">pub.dev</a></p><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><p><a href="https://github.com/BestBurning/platform_device_id" target="_blank" rel="noopener">platform_device_id</a> open source with <a href="https://github.com/BestBurning" target="_blank" rel="noopener">Github</a><br>and the licenses is <a href="https://opensource.org/licenses/BSD-3-Clause" target="_blank" rel="noopener">BSD-3-Clause</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Get device id from android、ios、windows、linux、mac&lt;/p&gt;
&lt;h2 id=&quot;Description&quot;&gt;&lt;a href=&quot;#Description&quot; class=&quot;headerlink&quot; title=&quot;Description&quot;&gt;&lt;
      
    
    </summary>
    
    
      <category term="products" scheme="https://di1shuai.com/categories/products/"/>
    
    
      <category term="go-flutter-plugin" scheme="https://di1shuai.com/tags/go-flutter-plugin/"/>
    
      <category term="Flutter" scheme="https://di1shuai.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>开发go-flutter插件</title>
    <link href="https://di1shuai.com/%E5%BC%80%E5%8F%91go-flutter%E6%8F%92%E4%BB%B6.html"/>
    <id>https://di1shuai.com/%E5%BC%80%E5%8F%91go-flutter%E6%8F%92%E4%BB%B6.html</id>
    <published>2020-04-19T10:03:34.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">flutter</span> <span class="comment">create</span> --<span class="comment">org</span> <span class="comment">com</span><span class="string">.</span><span class="comment">example</span> --<span class="comment">template=plugin</span> <span class="comment">test_hover</span></span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">cd test_hover</span><br><span class="line"><span class="comment"># test_hover/</span></span><br><span class="line"></span><br><span class="line">hover init-plugin github.com/<span class="keyword">my</span>-organization/test_hover</span><br></pre></td></tr></table></figure><h3 id="插件开发"><a href="#插件开发" class="headerlink" title="插件开发"></a>插件开发</h3><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="keyword">go</span></span><br><span class="line"># test_hover/<span class="keyword">go</span></span><br></pre></td></tr></table></figure><h3 id="运行示例"><a href="#运行示例" class="headerlink" title="运行示例"></a>运行示例</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">cd <span class="built_in">..</span>/example</span><br><span class="line"><span class="comment"># test_hover/example</span></span><br><span class="line"></span><br><span class="line">flutter build bundle</span><br><span class="line">hover init</span><br><span class="line">hover plugins get</span><br><span class="line"><span class="literal">yes</span> | hover run</span><br></pre></td></tr></table></figure><h3 id="git本地、远端初始化"><a href="#git本地、远端初始化" class="headerlink" title="git本地、远端初始化"></a>git本地、远端初始化</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># test_hover/example</span></span><br></pre></td></tr></table></figure><h3 id="go-flutter发布"><a href="#go-flutter发布" class="headerlink" title="go-flutter发布"></a>go-flutter发布</h3><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="string">..</span></span><br><span class="line"><span class="comment"># test_hover</span></span><br><span class="line"></span><br><span class="line">hover publish-plugin</span><br></pre></td></tr></table></figure><h3 id="flutter发布"><a href="#flutter发布" class="headerlink" title="flutter发布"></a>flutter发布</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test_hover</span></span><br><span class="line"></span><br><span class="line">flutter packages pub publish --dry-<span class="keyword">run</span></span><br><span class="line"><span class="bash">flutter packages pub publish</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;创建&quot;&gt;&lt;a href=&quot;#创建&quot; class=&quot;headerlink&quot; title=&quot;创建&quot;&gt;&lt;/a&gt;创建&lt;/h3&gt;&lt;figure class=&quot;highlight brainfuck&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="Flutter" scheme="https://di1shuai.com/tags/Flutter/"/>
    
  </entry>
  
  <entry>
    <title>设备唯一标识</title>
    <link href="https://di1shuai.com/%E8%AE%BE%E5%A4%87%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86.html"/>
    <id>https://di1shuai.com/%E8%AE%BE%E5%A4%87%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86.html</id>
    <published>2020-04-18T09:50:12.000Z</published>
    <updated>2021-04-03T23:26:31.483Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写的产品需要识别唯一设备，记录一下</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>主板 UUID</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">wmic csproduct <span class="builtin-name">get</span> UUID</span><br></pre></td></tr></table></figure><p>正常返回</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">UUID</span><br><span class="line"><span class="number">99</span>A4D301<span class="number">-53</span>F5<span class="number">-11</span>CB<span class="number">-8</span>CA0<span class="number">-9</span>CA39A9E1F01</span><br></pre></td></tr></table></figure><p>概率无效，返回</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">UUID</span></span><br><span class="line"><span class="attribute">FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF</span></span><br></pre></td></tr></table></figure><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>主板smBIOS UUID</p><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">dmidecode -s <span class="keyword">system</span>-<span class="built_in">uuid</span></span><br></pre></td></tr></table></figure><p>正常返回</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line"><span class="number">32</span>a70060<span class="number">-2</span>a39<span class="number">-437e-88</span>e2-d68e6154de9f</span><br></pre></td></tr></table></figure><p>概率无效，返回</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF</span></span><br></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><p>Apple 序列号</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ioreg</span> -l | grep IOPlatformSerialNumber | awk <span class="string">'NR==1&#123;print <span class="variable">$4</span>&#125;'</span></span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">"C02PLRT2OVH3"</span></span><br></pre></td></tr></table></figure><p>硬件 UUID</p><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ioreg</span> -l | grep IOPlatformUUID | awk <span class="string">'NR==1&#123;print <span class="variable">$4</span>&#125;'</span></span><br></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">"02662E79-E342<span class="string">-521</span>C<span class="string">-98</span>EA-D4C18B61FEF3"</span><br></pre></td></tr></table></figure><h3 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">androidid</span></span><br></pre></td></tr></table></figure><h3 id="Ios"><a href="#Ios" class="headerlink" title="Ios"></a>Ios</h3><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">identifierForVendor</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在写的产品需要识别唯一设备，记录一下&lt;/p&gt;
&lt;h3 id=&quot;Windows&quot;&gt;&lt;a href=&quot;#Windows&quot; class=&quot;headerlink&quot; title=&quot;Windows&quot;&gt;&lt;/a&gt;Windows&lt;/h3&gt;&lt;p&gt;主板 UUID&lt;/p&gt;
&lt;figure cl
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="Linux" scheme="https://di1shuai.com/tags/Linux/"/>
    
      <category term="Windows" scheme="https://di1shuai.com/tags/Windows/"/>
    
      <category term="Mac" scheme="https://di1shuai.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>命令合集</title>
    <link href="https://di1shuai.com/%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86.html"/>
    <id>https://di1shuai.com/%E5%91%BD%E4%BB%A4%E5%90%88%E9%9B%86.html</id>
    <published>2020-04-17T18:24:07.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<p>整理一个用过的命令的地方，方便自己，也方便他人吧</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a>Redis</h3><ul><li>redis安装</li></ul><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">docker pull <span class="keyword">redi</span><span class="variable">s:3</span>.<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>Redis运行</li></ul><figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line">~/redis$ docker run -p <span class="number">6379</span>:<span class="number">6379</span> -v $<span class="type">PWD</span>/<span class="class"><span class="keyword">data</span>:/<span class="keyword">data</span>  -d redis:3.2 redis-server <span class="comment">--appendonly yes</span></span></span><br></pre></td></tr></table></figure><p><code>-p 6379:6379</code>  : 将容器的6379端口映射到主机的6379端口</p><p><code>-v $PWD/data:/data</code> : 将主机中当前目录下的data挂载到容器的/data</p><p><code>redis-server --appendonly yes</code> : 在容器执行redis-server启动命令，并打开redis持久化配置</p><ul><li>用redis-client端链接容器内部</li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker exec -<span class="keyword">it</span> <span class="number">43</span>f7a65ec7f8 redis-cli</span><br></pre></td></tr></table></figure><ul><li>查看容器运行状况</li></ul><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker ps</span></span><br></pre></td></tr></table></figure><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li>Mysql 运行</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name mysql -e <span class="attribute">MYSQL_ROOT_PASSWORD</span>=admin -p 3306:3306 -d mysql:5.7.21</span><br></pre></td></tr></table></figure><ul><li>链接MySQL</li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> -<span class="keyword">it</span> <span class="comment">--rm \</span></span><br><span class="line"><span class="comment">--link mysql:mysql \</span></span><br><span class="line">mysql \</span><br><span class="line">sh -c 'exec mysql -h<span class="string">"$MYSQL_PORT_3306_TCP_ADDR"</span> -P<span class="string">"$MYSQL_PORT_3306_TCP_PORT"</span> -uroot -p<span class="string">"$MYSQL_ENV_MYSQL_ROOT_PASSWORD"</span>'</span><br></pre></td></tr></table></figure><h3 id="Mongo"><a href="#Mongo" class="headerlink" title="Mongo"></a>Mongo</h3><ul><li>Mongo 启动</li></ul><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 不带验证</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 27017:27017 -v <span class="variable">$PWD</span>/db:/data/db -d mongo:3.6.3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 带验证</span></span><br><span class="line">docker <span class="keyword">run</span><span class="bash"> -p 27017:27017 -v <span class="variable">$PWD</span>/db:/data/db -d mongo:3.6.3 --auth</span></span><br><span class="line">docker exec -it <span class="number">8</span>a00b0e0b75b mongo admin</span><br></pre></td></tr></table></figure><ul><li>用户初始化</li></ul><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">mongo</span></span><br><span class="line"><span class="selector-tag">use</span> <span class="selector-tag">admin</span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.createUser</span>(&#123; <span class="attribute">user</span>: <span class="string">'shuai'</span>, <span class="attribute">pwd</span>: <span class="string">'admin'</span>, <span class="attribute">roles</span>: [ &#123; <span class="attribute">role</span>: <span class="string">"root"</span>, <span class="attribute">db</span>: <span class="string">"admin"</span> &#125; ] &#125;);</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.auth</span>(<span class="string">"shuai"</span>,<span class="string">"admin"</span>)</span><br><span class="line"><span class="selector-tag">use</span> <span class="selector-tag">dspDashboard</span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.createUser</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">user</span>: <span class="string">"shuai"</span>,</span><br><span class="line">        <span class="attribute">pwd</span>: <span class="string">"admin"</span>,</span><br><span class="line">        <span class="attribute">roles</span>: [ <span class="string">"readWrite"</span>, <span class="string">"dbAdmin"</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h3><ul><li>Kafka 安装</li></ul><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker</span> pull wurstmeister/kafka:<span class="number">0.10.0.1</span></span><br></pre></td></tr></table></figure><ul><li>Kafka 启动</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> --name kafka \</span><br><span class="line">-p 9092:9092 \</span><br><span class="line">-e <span class="attribute">KAFKA_ADVERTISED_HOST_NAME</span>=mine \</span><br><span class="line">-e <span class="attribute">KAFKA_ADVERTISED_PORT</span>=9092 \</span><br><span class="line">-e <span class="attribute">KAFKA_CREATE_TOPICS</span>=<span class="string">"test:1:1"</span> \</span><br><span class="line">-e <span class="attribute">KAFKA_ZOOKEEPER_CONNECT</span>=192.168.214.220:2181 \</span><br><span class="line">-d wurstmeister/kafka:0.10.0.1</span><br></pre></td></tr></table></figure><ul><li>Kafka Manager</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">docker <span class="builtin-name">run</span> -itd \</span><br><span class="line"><span class="attribute">--restart</span>=always \</span><br><span class="line"><span class="attribute">--name</span>=kafka-manager \</span><br><span class="line">-p 9000:9000 \</span><br><span class="line">-e <span class="attribute">ZK_HOSTS</span>=<span class="string">"192.168.214.220:2181"</span> \</span><br><span class="line">sheepkiller/kafka-manager</span><br></pre></td></tr></table></figure><h3 id="ZooKeeper"><a href="#ZooKeeper" class="headerlink" title="ZooKeeper"></a>ZooKeeper</h3><ul><li>ZooKeeper 安装</li></ul><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker pull zookeeper</span></span><br></pre></td></tr></table></figure><ul><li>Zookeeper 启动</li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">run</span> <span class="comment">--name some-zookeeper \</span></span><br><span class="line"><span class="comment">--restart always \</span></span><br><span class="line">-p <span class="number">2181</span>:<span class="number">2181</span> \</span><br><span class="line">-d zookeeper</span><br></pre></td></tr></table></figure><h3 id="Druid-Imply"><a href="#Druid-Imply" class="headerlink" title="Druid-Imply"></a>Druid-Imply</h3><ul><li>Imply</li></ul><figure class="highlight dns"><table><tr><td class="code"><pre><span class="line">docker run -p <span class="number">8081-8110</span>:<span class="number">8081-8110</span> -p <span class="number">8200:8200</span> -p <span class="number">9095:9095</span> -d --name imply imply/imply</span><br><span class="line">docker exec -it imply bin/post-index-task -f quickstart/wikiticker-index.json</span><br></pre></td></tr></table></figure><ul><li>Docker-Compose</li></ul><p><code>docker-compose.yml:</code></p><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">version:</span> <span class="string">'2'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  zookeeper:</span></span><br><span class="line"><span class="symbol">    image:</span> wurstmeister/zookeeper   <span class="meta">## 镜像</span></span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"2181:2181"</span>                 <span class="meta">## 对外暴露的端口号</span></span><br><span class="line"><span class="symbol">  kafka:</span></span><br><span class="line"><span class="symbol">    image:</span> wurstmeister/kafka       <span class="meta">## 镜像</span></span><br><span class="line"><span class="symbol">    volumes:</span> </span><br><span class="line">         - <span class="meta-keyword">/var/</span>run/docker.sock:<span class="meta-keyword">/var/</span>run/docker.sock</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"9092:9092"</span></span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line"><span class="symbol">      KAFKA_ADVERTISED_HOST_NAME:</span> localhost   <span class="meta">## 修改:宿主机IP</span></span><br><span class="line"><span class="symbol">      KAFKA_ZOOKEEPER_CONNECT:</span> zookeeper:<span class="number">2181</span>       <span class="meta">## 卡夫卡运行是基于zookeeper的</span></span><br><span class="line"><span class="symbol">  kafka_manager:</span></span><br><span class="line"><span class="symbol">    image:</span> hlebalbau/kafka-manager:latest</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"9000:9000"</span></span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line"><span class="symbol">      ZK_HOSTS:</span> <span class="string">"zookeeper:2181"</span></span><br><span class="line"><span class="symbol">      APPLICATION_SECRET:</span> <span class="string">"random-secret"</span></span><br><span class="line"><span class="symbol">    command:</span> -Dpidfile.path=<span class="meta-keyword">/dev/</span>null</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="symbol">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="symbol">services:</span></span><br><span class="line"><span class="symbol">  zookeeper:</span></span><br><span class="line"><span class="symbol">    image:</span> wurstmeister/zookeeper   <span class="meta">## 镜像</span></span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"2181:2181"</span>                 <span class="meta">## 对外暴露的端口号</span></span><br><span class="line"><span class="symbol">  kafka:</span></span><br><span class="line"><span class="symbol">    image:</span> wurstmeister/kafka       <span class="meta">## 镜像</span></span><br><span class="line"><span class="symbol">    volumes:</span> </span><br><span class="line">      - <span class="meta-keyword">/var/</span>run/docker.sock:<span class="meta-keyword">/var/</span>run/docker.sock</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"9092:9092"</span></span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line"><span class="symbol">      KAFKA_ADVERTISED_HOST_NAME:</span> localhost   <span class="meta">## 修改:宿主机IP</span></span><br><span class="line"><span class="symbol">      KAFKA_ZOOKEEPER_CONNECT:</span> zookeeper:<span class="number">2181</span>       <span class="meta">## 卡夫卡运行是基于zookeeper的</span></span><br><span class="line"><span class="symbol">  kafka_manager:</span></span><br><span class="line"><span class="symbol">    image:</span> hlebalbau/kafka-manager:latest</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"9000:9000"</span></span><br><span class="line"><span class="symbol">    environment:</span></span><br><span class="line"><span class="symbol">      ZK_HOSTS:</span> <span class="string">"zookeeper:2181"</span></span><br><span class="line"><span class="symbol">      APPLICATION_SECRET:</span> <span class="string">"random-secret"</span></span><br><span class="line"><span class="symbol">    command:</span> -Dpidfile.path=<span class="meta-keyword">/dev/</span>null</span><br><span class="line"><span class="symbol">    volumes:</span> </span><br><span class="line">      - <span class="meta-keyword">/var/</span>run/docker.sock:<span class="meta-keyword">/var/</span>run/docker.sock</span><br><span class="line"><span class="symbol">  imply:</span></span><br><span class="line"><span class="symbol">    image:</span> imply/imply</span><br><span class="line"><span class="symbol">    ports:</span></span><br><span class="line">      - <span class="string">"2182:2181"</span></span><br><span class="line">      - <span class="string">"8081-8110:8081-8110"</span></span><br><span class="line">      - <span class="string">"8200:8200"</span></span><br><span class="line">      - <span class="string">"9095:9095"</span></span><br><span class="line"><span class="symbol">    links:</span></span><br><span class="line">      - kafka</span><br><span class="line"><span class="symbol">    volumes:</span> </span><br><span class="line">      - <span class="meta-keyword">/var/</span>run/docker.sock:<span class="meta-keyword">/var/</span>run/docker.sock</span><br></pre></td></tr></table></figure><p>run</p><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">docker-compose up</span></span><br></pre></td></tr></table></figure><h3 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><ul><li>RabbitMQ</li></ul><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">docker run -d -p <span class="number">15672</span>:<span class="number">15672</span>  -p  <span class="number">5672</span>:<span class="number">5672</span>  -v $PWD/<span class="symbol">rabbitmq:</span>/var/<span class="class"><span class="keyword">lib</span>/<span class="title">rabbitmq</span>  --<span class="title">name</span> <span class="title">rabbitmq</span> <span class="title">rabbitmq</span>:<span class="title">management</span></span></span><br></pre></td></tr></table></figure><h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><h3 id="MySQL-1"><a href="#MySQL-1" class="headerlink" title="MySQL"></a>MySQL</h3><ul><li>允许外部访问</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> <span class="string">'root'</span>@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'admin'</span>;</span><br></pre></td></tr></table></figure><ul><li>查看编码</li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'character%'</span>;</span><br></pre></td></tr></table></figure><h3 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h3><ul><li>插入多条</li></ul><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.inventory</span><span class="selector-class">.insertMany</span>([</span><br><span class="line">   <span class="comment">// MongoDB adds the _id field with an ObjectId if _id is not present</span></span><br><span class="line">   &#123; <span class="attribute">item</span>: <span class="string">"journal"</span>, <span class="attribute">qty</span>: <span class="number">25</span>, <span class="attribute">status</span>: <span class="string">"A"</span>,</span><br><span class="line">       <span class="attribute">size</span>: &#123; <span class="attribute">h</span>: <span class="number">14</span>, <span class="attribute">w</span>: <span class="number">21</span>, <span class="attribute">uom</span>: <span class="string">"cm"</span> &#125;, <span class="attribute">tags</span>: [ <span class="string">"blank"</span>, <span class="string">"red"</span> ] &#125;,</span><br><span class="line">   &#123; <span class="attribute">item</span>: <span class="string">"notebook"</span>, <span class="attribute">qty</span>: <span class="number">50</span>, <span class="attribute">status</span>: <span class="string">"A"</span>,</span><br><span class="line">       <span class="attribute">size</span>: &#123; <span class="attribute">h</span>: <span class="number">8.5</span>, <span class="attribute">w</span>: <span class="number">11</span>, <span class="attribute">uom</span>: <span class="string">"in"</span> &#125;, <span class="attribute">tags</span>: [ <span class="string">"red"</span>, <span class="string">"blank"</span> ] &#125;,</span><br><span class="line">   &#123; <span class="attribute">item</span>: <span class="string">"paper"</span>, <span class="attribute">qty</span>: <span class="number">100</span>, <span class="attribute">status</span>: <span class="string">"D"</span>,</span><br><span class="line">       <span class="attribute">size</span>: &#123; <span class="attribute">h</span>: <span class="number">8.5</span>, <span class="attribute">w</span>: <span class="number">11</span>, <span class="attribute">uom</span>: <span class="string">"in"</span> &#125;, <span class="attribute">tags</span>: [ <span class="string">"red"</span>, <span class="string">"blank"</span>, <span class="string">"plain"</span> ] &#125;,</span><br><span class="line">   &#123; <span class="attribute">item</span>: <span class="string">"planner"</span>, <span class="attribute">qty</span>: <span class="number">75</span>, <span class="attribute">status</span>: <span class="string">"D"</span>,</span><br><span class="line">       <span class="attribute">size</span>: &#123; <span class="attribute">h</span>: <span class="number">22.85</span>, <span class="attribute">w</span>: <span class="number">30</span>, <span class="attribute">uom</span>: <span class="string">"cm"</span> &#125;, <span class="attribute">tags</span>: [ <span class="string">"blank"</span>, <span class="string">"red"</span> ] &#125;,</span><br><span class="line">   &#123; <span class="attribute">item</span>: <span class="string">"postcard"</span>, <span class="attribute">qty</span>: <span class="number">45</span>, <span class="attribute">status</span>: <span class="string">"A"</span>,</span><br><span class="line">       <span class="attribute">size</span>: &#123; <span class="attribute">h</span>: <span class="number">10</span>, <span class="attribute">w</span>: <span class="number">15.25</span>, <span class="attribute">uom</span>: <span class="string">"cm"</span> &#125;, <span class="attribute">tags</span>: [ <span class="string">"blue"</span> ] &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><ul><li>查找全部</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.inventory</span><span class="selector-class">.find</span>( &#123;&#125; )</span><br></pre></td></tr></table></figure><ul><li>查找过滤条件</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.inventory</span><span class="selector-class">.find</span>( &#123; <span class="attribute">status</span>: <span class="string">"D"</span> &#125; )</span><br></pre></td></tr></table></figure><ul><li>条件查找</li></ul><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">db.inventory.find( &#123; <span class="string">size:</span> &#123; <span class="string">h:</span> <span class="number">14</span>, <span class="string">w:</span> <span class="number">21</span>, <span class="string">uom:</span> <span class="string">"cm"</span> &#125; &#125; )</span><br><span class="line">db.inventory.find( &#123; <span class="string">"size.uom"</span>: <span class="string">"in"</span> &#125; )</span><br></pre></td></tr></table></figure><ul><li>选择DB</li></ul><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> myDB</span><br></pre></td></tr></table></figure><ul><li>创建DB</li></ul><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> diyishuai</span><br><span class="line"><span class="keyword">db</span>.student.insertOne(&#123;<span class="string">"name"</span>:<span class="string">"diyishuai"</span>,<span class="string">"age"</span>:25,<span class="string">"girls"</span>:[&#123;<span class="string">"name"</span>:<span class="string">"tomato"</span>,<span class="string">"age"</span>:18&#125;,&#123;<span class="string">"name"</span>:<span class="string">"vivian"</span>,<span class="string">"age"</span>:20&#125;]&#125;)</span><br></pre></td></tr></table></figure><pre><code>The insertOne() operation creates both the database myNewDB and the collection myNewCollection1 if they do not already exist.</code></pre><ul><li>创建collection</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">db</span><span class="selector-class">.myNewCollection2</span><span class="selector-class">.insertOne</span>( &#123; <span class="attribute">x</span>: <span class="number">1</span> &#125; )</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.myNewCollection3</span><span class="selector-class">.createIndex</span>( &#123; <span class="attribute">y</span>: <span class="number">1</span> &#125; )</span><br></pre></td></tr></table></figure><ul><li>按ObjectId查询</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">db.advertisement.<span class="builtin-name">find</span>(&#123;<span class="string">"_id"</span> : ObjectId(<span class="string">"5b1f6e0fc365845f49a4ec2c"</span>)&#125;)</span><br></pre></td></tr></table></figure><ul><li>创建唯一索引</li></ul><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">db.advertisement.ensureIndex(&#123;<span class="string">"name"</span>:<span class="number">1</span>,<span class="string">"productId"</span>:<span class="number">1</span>&#125;,&#123;<span class="string">"unique"</span>:<span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><ul><li>Mongo数据导出</li></ul><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">mongodump -u shuai -<span class="selector-tag">p</span> admin -d attr -o attr</span><br><span class="line">mongodump -u clink -<span class="selector-tag">p</span> Centrix5438 -d api_attr -c click --archive=click<span class="selector-class">.archive</span> --gzip</span><br></pre></td></tr></table></figure><ul><li>Mongo数据导入</li></ul><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">./bin/mongoimport</span> <span class="params">--host</span> localhost <span class="params">--port</span> 27017 <span class="params">--db</span> dbname <span class="params">--collection</span> collectionName <span class="params">--username</span> root <span class="params">--password</span> <span class="keyword">pwd</span>  &lt;  mongo.json</span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">mongorestore -<span class="keyword">u</span> shuai -p admin --<span class="keyword">db</span> dashboard --<span class="keyword">dir</span> data/<span class="keyword">db</span>/dashboard</span><br></pre></td></tr></table></figure><h2 id="Platform"><a href="#Platform" class="headerlink" title="Platform"></a>Platform</h2><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><ul><li>端口占用查看</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">lsof</span> <span class="selector-tag">-i</span><span class="selector-pseudo">:3306</span></span><br></pre></td></tr></table></figure><ul><li>关机</li></ul><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">shutdown</span> -h -t <span class="number">10</span></span><br></pre></td></tr></table></figure><p><code>-h</code> 关机<br><code>-t</code> 延时多少s </p><ul><li>Hosname修改</li></ul><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">hostnamectl </span><span class="built_in">set-hostname</span> &lt;<span class="string">newhostname&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><ul><li>关机</li></ul><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="built_in">shutdown</span> -s -t <span class="number">10</span></span><br></pre></td></tr></table></figure><ul><li>端口查看</li></ul><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">netstat -ano</span></span><br></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a>Mac</h3><ul><li>关机</li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">osascript -e '<span class="keyword">tell</span> app <span class="string">"System Events"</span> <span class="keyword">to</span> shut down'</span><br></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">shutdown</span> -h <span class="number">22</span>:<span class="number">30</span></span><br></pre></td></tr></table></figure><ul><li>base64 encode</li></ul><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cat</span> <span class="keyword">file</span> | base64</span><br></pre></td></tr></table></figure><ul><li>base64 decode</li></ul><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cat</span> <span class="keyword">file</span> | base64 --<span class="keyword">decode</span></span><br></pre></td></tr></table></figure><h2 id="MQ"><a href="#MQ" class="headerlink" title="MQ"></a>MQ</h2><h3 id="RabbitMQ-1"><a href="#RabbitMQ-1" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h3><ul><li>添加远程用户<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">rabbitmqctl add_user<span class="built_in"> root</span> centirxlink123</span><br><span class="line">rabbitmqctl set_user_tags<span class="built_in"> root</span> administrator</span><br><span class="line">rabbitmqctl set_permissions -p /<span class="built_in"> root</span> <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Kafka-Manager"><a href="#Kafka-Manager" class="headerlink" title="Kafka-Manager"></a>Kafka-Manager</h3><ul><li>run</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">nohup bin/kafka-manager -Dconfig.<span class="attribute">file</span>=conf/application.conf -Dhttp.<span class="attribute">port</span>=9000 &amp;</span><br></pre></td></tr></table></figure><h2 id="BigData"><a href="#BigData" class="headerlink" title="BigData"></a>BigData</h2><h3 id="Imply"><a href="#Imply" class="headerlink" title="Imply"></a>Imply</h3><ul><li>启动<figure class="highlight stata"><table><tr><td class="code"><pre><span class="line">bin/supervise -c <span class="keyword">conf</span>/supervise/quickstart.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h3><ul><li>授权<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">hdfs dfs -chown root:hdfs  /<span class="keyword">user</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h3><ul><li><p>查看表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure></li><li><p>查看表结构</p><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">desc tableName<span class="comment">;</span></span><br></pre></td></tr></table></figure></li><li><p>查看表分区</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">partitions</span> tableName;</span><br></pre></td></tr></table></figure></li><li><p>从分区中查询数据</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">1:</span><br><span class="line">hive (DTS_DEV)&gt; show partitions t_ut_raw_imp_log;</span><br><span class="line">OK</span><br><span class="line">partition</span><br><span class="line"><span class="attribute">pt</span>=2019-02-18</span><br><span class="line"><span class="attribute">pt</span>=2019-03-03</span><br><span class="line"></span><br><span class="line">2:</span><br><span class="line">select * <span class="keyword">from</span> t_ut_raw_imp_log where <span class="attribute">pt</span>=<span class="string">'2019-03-03'</span> limit 10;</span><br></pre></td></tr></table></figure></li></ul><h2 id="云平台"><a href="#云平台" class="headerlink" title="云平台"></a>云平台</h2><h3 id="腾讯云"><a href="#腾讯云" class="headerlink" title="腾讯云"></a>腾讯云</h3><ul><li><p>ssh登录</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">ssh -i ~<span class="regexp">/.ssh/</span>CentrixlinkMac root<span class="variable">@di1shuai</span></span><br></pre></td></tr></table></figure></li><li><p>Scp文件传输</p><figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">scp -i ~<span class="regexp">/.ssh/</span>CentrixlinkMac knife<span class="number">-1.0</span>.jar root<span class="variable">@di1shuai</span><span class="symbol">:/tmp</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="阿里云"><a href="#阿里云" class="headerlink" title="阿里云"></a>阿里云</h3><ul><li>访问Hadoop、Spark等WEB-UI</li></ul><ol><li><p>Copy自己的公钥到阿里云</p><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">自己的公钥<span class="string">path:</span><span class="regexp">~/.ssh/</span>id_rsa.pub</span><br><span class="line">阿里云验证<span class="string">path:</span><span class="regexp">/root/</span>.ssh/authorized_keys</span><br></pre></td></tr></table></figure></li><li><p>配置自己本地的ssh</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">vi .ssh/config</span><br><span class="line"></span><br><span class="line">Host jms</span><br><span class="line">    HostName jms.xxx.com</span><br><span class="line">   <span class="built_in"> User </span>username</span><br><span class="line">   <span class="built_in"> Port </span>4500</span><br><span class="line"></span><br><span class="line">Host emr</span><br><span class="line">    HostName hxxx.oxxx.sxxx.txxx</span><br><span class="line">    DynamicForward 3128</span><br><span class="line">   <span class="built_in"> User </span>root</span><br><span class="line">   <span class="built_in"> Port </span>22</span><br><span class="line">    </span><br><span class="line">Host druid-master-1</span><br><span class="line">    HostName hxxx.oxxx.sxxx.txxx</span><br><span class="line">    DynamicForward 3128</span><br><span class="line">   <span class="built_in"> User </span>root</span><br><span class="line">   <span class="built_in"> Port </span>22</span><br></pre></td></tr></table></figure></li><li><p>启动代理</p><figure class="highlight lsl"><table><tr><td class="code"><pre><span class="line">nohup ssh  -ND <span class="number">8157</span> emr &amp;</span><br><span class="line">nohup ssh  -ND <span class="number">8158</span> druid-master<span class="number">-1</span> &amp;</span><br><span class="line">nohup ssh  -ND <span class="number">8159</span> us-hdfs-header<span class="number">-1</span> &amp;</span><br></pre></td></tr></table></figure></li><li><p>启动代理chrome</p><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="string">/Applications/Google</span>\ Chrome.app/Contents/MacOS/Google\ Chrome  Chrome <span class="params">--proxy-server=</span><span class="string">"socks5://localhost:8157"</span> <span class="params">--host-resolver-rules=</span><span class="string">"MAP * 0.0.0.0 , EXCLUDE localhost"</span> <span class="params">--user-data-dir=/tmp/</span></span><br><span class="line"></span><br><span class="line"><span class="string">/Applications/Google</span>\ Chrome.app/Contents/MacOS/Google\ Chrome  Chrome <span class="params">--proxy-server=</span><span class="string">"socks5://localhost:8158"</span> <span class="params">--host-resolver-rules=</span><span class="string">"MAP * 0.0.0.0 , EXCLUDE localhost"</span> <span class="params">--user-data-dir=/tmp/</span></span><br><span class="line"></span><br><span class="line"><span class="string">/Applications/Google</span>\ Chrome.app/Contents/MacOS/Google\ Chrome  Chrome <span class="params">--proxy-server=</span><span class="string">"socks5://localhost:8159"</span> <span class="params">--host-resolver-rules=</span><span class="string">"MAP * 0.0.0.0 , EXCLUDE localhost"</span> <span class="params">--user-data-dir=/tmp/</span></span><br></pre></td></tr></table></figure></li><li><p>访问<code>http://localhost:8088</code>or<code>50070</code></p></li></ol><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h3><ul><li>分支切换</li></ul><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">flutter channel dev</span><br><span class="line">flutter channel <span class="literal">master</span></span><br><span class="line">flutter channel beta</span><br><span class="line">flutter channel stable</span><br></pre></td></tr></table></figure><ul><li>升级</li></ul><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flutter upgrade</span></span><br></pre></td></tr></table></figure><h4 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h4><ul><li>创建项目</li></ul><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">flutter create --<span class="keyword">org </span>com.example --<span class="keyword">android-language </span><span class="keyword">java </span>project_name</span><br></pre></td></tr></table></figure><h4 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h4><ul><li>创建插件项目</li></ul><figure class="highlight brainfuck"><table><tr><td class="code"><pre><span class="line"><span class="comment">flutter</span> <span class="comment">create</span> --<span class="comment">org</span> <span class="comment">com</span><span class="string">.</span><span class="comment">example</span> --<span class="comment">template=plugin</span> <span class="comment">test_hover</span></span><br></pre></td></tr></table></figure><ul><li>初始化插件</li></ul><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">hover init-plugin github.com/<span class="keyword">my</span>-organization/test_hover</span><br></pre></td></tr></table></figure><ul><li>null safety 检查</li></ul><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">dart migrate</span></span><br></pre></td></tr></table></figure><ul><li>dart format</li></ul><figure class="highlight erlang"><table><tr><td class="code"><pre><span class="line">dartfmt -w .</span><br></pre></td></tr></table></figure><ul><li>插件发布检查</li></ul><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">flutter packages pub publish --dry-<span class="keyword">run</span></span><br></pre></td></tr></table></figure><ul><li>插件发布</li></ul><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flutter packages pub publish</span></span><br></pre></td></tr></table></figure><h4 id="Icon"><a href="#Icon" class="headerlink" title="Icon"></a>Icon</h4><ul><li>生成icon</li></ul><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">flutter pub <span class="keyword">run</span><span class="bash"> flutter_launcher_icons:main</span></span><br></pre></td></tr></table></figure><h4 id="Desktop"><a href="#Desktop" class="headerlink" title="Desktop"></a>Desktop</h4><h5 id="Macos"><a href="#Macos" class="headerlink" title="Macos"></a>Macos</h5><ul><li>启用macos</li></ul><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">flutter<span class="built_in"> config </span>--enable-macos-desktop</span><br></pre></td></tr></table></figure><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><ul><li>开启边界模式</li></ul><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'package:flutter/rendering.dart'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  debugPaintSizeEnabled = <span class="keyword">true</span>;</span><br><span class="line">  runApp(XXX());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h4><h5 id="android"><a href="#android" class="headerlink" title="android"></a>android</h5><ul><li>app bundle</li></ul><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> &lt;<span class="keyword">app</span> <span class="keyword">dir</span>&gt;</span><br><span class="line"></span><br><span class="line">flutter build appbundle</span><br></pre></td></tr></table></figure><ul><li>apk</li></ul><figure class="highlight stata"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> &lt;<span class="keyword">app</span> <span class="keyword">dir</span>&gt;</span><br><span class="line"></span><br><span class="line">flutter build apk</span><br><span class="line"></span><br><span class="line">flutter install</span><br></pre></td></tr></table></figure><h5 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h5><h4 id="go-flutter"><a href="#go-flutter" class="headerlink" title="go-flutter"></a>go-flutter</h4><h5 id="Plugin-1"><a href="#Plugin-1" class="headerlink" title="Plugin"></a>Plugin</h5><ul><li>插件初始化</li></ul><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hover init</span></span><br></pre></td></tr></table></figure><ul><li>插件获取</li></ul><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">hover plugins <span class="keyword">get</span></span><br></pre></td></tr></table></figure><ul><li>插件发布</li></ul><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hover plugins</span></span><br></pre></td></tr></table></figure><ul><li>开发一个完整插件</li></ul><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 创建</span></span><br><span class="line">flutter create --org com.example --template=plugin test_hover</span><br><span class="line"></span><br><span class="line"><span class="meta"># 初始化</span></span><br><span class="line">cd test_hover</span><br><span class="line"><span class="meta"># test_hover/</span></span><br><span class="line">hover init-plugin github.com/my-organization/test_hover</span><br><span class="line"></span><br><span class="line"><span class="meta"># 插件开发</span></span><br><span class="line">cd go</span><br><span class="line"><span class="meta"># test_hover/go</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 运行示例</span></span><br><span class="line">cd ../example</span><br><span class="line"><span class="meta"># test_hover/example</span></span><br><span class="line">flutter build bundle</span><br><span class="line">hover init</span><br><span class="line">hover plugins <span class="keyword">get</span></span><br><span class="line">yes | hover run</span><br><span class="line"></span><br><span class="line"><span class="meta"># tag发布</span></span><br><span class="line">cd ..</span><br><span class="line"><span class="meta"># test_hover</span></span><br><span class="line">hover publish-plugin</span><br><span class="line"></span><br><span class="line"><span class="meta"># flutter发布</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># test_hover</span></span><br><span class="line">flutter packages pub publish --dry-run</span><br><span class="line">flutter packages pub publish</span><br></pre></td></tr></table></figure><h5 id="Build-1"><a href="#Build-1" class="headerlink" title="Build"></a>Build</h5><h6 id="Mac-1"><a href="#Mac-1" class="headerlink" title="Mac"></a>Mac</h6><ul><li>初始化</li></ul><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hover init-packaging darwin-dmg</span></span><br></pre></td></tr></table></figure><ul><li>构建</li></ul><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">hover</span> <span class="keyword">build </span>darwin-dmg</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一个用过的命令的地方，方便自己，也方便他人吧&lt;/p&gt;
&lt;h2 id=&quot;Docker&quot;&gt;&lt;a href=&quot;#Docker&quot; class=&quot;headerlink&quot; title=&quot;Docker&quot;&gt;&lt;/a&gt;Docker&lt;/h2&gt;&lt;h3 id=&quot;Redis&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="命令" scheme="https://di1shuai.com/tags/%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>腾讯云cdn刷新</title>
    <link href="https://di1shuai.com/%E8%85%BE%E8%AE%AF%E4%BA%91cdn%E5%88%B7%E6%96%B0.html"/>
    <id>https://di1shuai.com/%E8%85%BE%E8%AE%AF%E4%BA%91cdn%E5%88%B7%E6%96%B0.html</id>
    <published>2020-04-07T00:00:00.000Z</published>
    <updated>2021-04-03T23:26:31.483Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="https://e.coding.net/" target="_blank" rel="noopener">e.coding.net</a>上用官方提供的<a href="https://codes-farm.coding.net/p/html-cos-demo/d/html-cos-demo/git" target="_blank" rel="noopener">demo</a>自动将<code>博客代码</code>推至<strong>腾讯COS</strong>后，发现涉及云函数刷新CDN的地方计费方式过于恐怖，所以用自己的方式去刷新CDN</p><h2 id="前置步骤"><a href="#前置步骤" class="headerlink" title="前置步骤"></a>前置步骤</h2><p>直到<code>刷新CDN</code>之前与<a href="https://codes-farm.coding.net/p/html-cos-demo/d/html-cos-demo/git" target="_blank" rel="noopener">demo</a>保持一致</p><h2 id="刷新cdn"><a href="#刷新cdn" class="headerlink" title="刷新cdn"></a>刷新cdn</h2><p>在<code>coding</code>-&gt;<code>项目</code>中<code>构建</code>设置中添加一步<code>刷新CDN</code>:</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">  agent any</span><br><span class="line">  stages &#123;</span><br><span class="line">    stage(<span class="string">'检出'</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        checkout([</span><br><span class="line">          $clas<span class="variable">s:</span> <span class="string">'GitSCM'</span>,</span><br><span class="line">          branche<span class="variable">s:</span> [[name: env.GIT_BUILD_REF]],</span><br><span class="line">          userRemoteConfig<span class="variable">s:</span> [[ur<span class="variable">l:</span> env.GIT_REPO_URL, credentialsId: env.CREDENTIALS_ID]]</span><br><span class="line">        ])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'部署到腾讯云存储'</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'部署中...'</span></span><br><span class="line">        <span class="keyword">sh</span> <span class="string">'coscmd config -a $TENCENT_SECRET_ID -s $TENCENT_SECRET_KEY -b $TENCENT_BUCKET -r $TENCENT_REGION'</span></span><br><span class="line">        <span class="keyword">sh</span> <span class="string">'rm -rf .git'</span></span><br><span class="line">        <span class="keyword">sh</span> <span class="string">'coscmd upload -r ./ /'</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'部署完成'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    stage(<span class="string">'刷新CDN'</span>) &#123;</span><br><span class="line">      steps &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'准备刷新'</span></span><br><span class="line">        <span class="keyword">sh</span> <span class="string">'git clone https://github.com/BestBurning/tencentcloud.git'</span></span><br><span class="line">        dir(path: <span class="string">'./tencentcloud'</span>) &#123;</span><br><span class="line">          <span class="keyword">sh</span> <span class="string">'mvn clean package '</span></span><br><span class="line">          <span class="keyword">sh</span> <span class="string">'java -jar ./target/tencentcloud-1.0-SNAPSHOT.jar $TENCENT_SECRET_ID $TENCENT_SECRET_KEY $TENCENT_REGION https://yourdomain/'</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">'刷新完毕'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://images.di1shuai.com/FozG5fBtNAd0NMEifDnGiTixubYN" alt></p><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">java -jar ./target/tencentcloud-<span class="number">1.0</span>-SNAPSHOT<span class="selector-class">.jar</span> <span class="variable">$TENCENT_SECRET_ID</span> <span class="variable">$TENCENT_SECRET_KEY</span> <span class="variable">$TENCENT_REGION</span> urlIndex1 urlIndex2 urlIndex3 ...</span><br><span class="line"></span><br><span class="line">e<span class="selector-class">.g</span>.</span><br><span class="line">java -jar ./target/tencentcloud-<span class="number">1.0</span>-SNAPSHOT<span class="selector-class">.jar</span> <span class="variable">$TENCENT_SECRET_ID</span> <span class="variable">$TENCENT_SECRET_KEY</span> <span class="variable">$TENCENT_REGION</span> https:<span class="comment">//di1shuai.com/</span></span><br></pre></td></tr></table></figure><ol><li><code>$TENCENT_SECRET_ID</code> - 腾讯云<code>SECRET_ID</code></li><li><code>$TENCENT_SECRET_KEY</code> - 腾讯云<code>SECRET_KEY</code></li><li><code>$TENCENT_REGION</code> - 腾讯云区域</li><li><code>&gt;=4</code>的参数均为要刷新的<code>目录</code></li></ol><h2 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">git clone https:<span class="regexp">//gi</span>thub.com<span class="regexp">/BestBurning/</span>tencentcloud.git</span><br><span class="line">mvn clean package </span><br><span class="line">java -jar .<span class="regexp">/target/</span>tencentcloud-<span class="number">1.0</span>-SNAPSHOT.jar <span class="variable">$TENCENT_SECRET_ID</span> <span class="variable">$TENCENT_SECRET_KEY</span> <span class="variable">$TENCENT_REGION</span> https:<span class="regexp">//y</span>ourdomain<span class="regexp">/</span></span><br></pre></td></tr></table></figure><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/BestBurning/tencentcloud" target="_blank" rel="noopener">cdn刷新源码</a>开源在<a href="https://github.com/BestBurning" target="_blank" rel="noopener">Github</a></p><h2 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h2><p>采用<a href="https://github.com/BestBurning/tencentcloud/blob/master/LICENSE" target="_blank" rel="noopener">MIT</a>开源协议</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在&lt;a href=&quot;https://e.coding.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;e.coding.net&lt;/a&gt;上用官方提供的&lt;a href=&quot;https://codes-farm.coding.net/p/html-cos-
      
    
    </summary>
    
    
      <category term="products" scheme="https://di1shuai.com/categories/products/"/>
    
    
      <category term="command-util" scheme="https://di1shuai.com/tags/command-util/"/>
    
  </entry>
  
  <entry>
    <title>各种仓库国内镜像</title>
    <link href="https://di1shuai.com/%E5%90%84%E7%A7%8D%E4%BB%93%E5%BA%93%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F.html"/>
    <id>https://di1shuai.com/%E5%90%84%E7%A7%8D%E4%BB%93%E5%BA%93%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F.html</id>
    <published>2020-03-28T11:00:02.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>只是想让它快一点</p></blockquote><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><p>阿里云仓库</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">interactiveMode</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">usePluginRegistry</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">offline</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云谷歌仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/google<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云阿帕奇仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/apache-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云spring仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云spring插件仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/spring-plugin<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">profiles</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">activeProfiles</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h3><p>阿里云镜像</p><ol><li>创建文件</li></ol><ul><li><p>linux</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vi</span> ~/.pip/pip.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></li><li><p>windows:</p><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line"><span class="variable">%HOMEPATH%</span><span class="symbol">\p</span>ip<span class="symbol">\p</span>ip.ini</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li>写入镜像<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">trusted-host</span> =  mirrors.aliyun.com</span><br><span class="line"><span class="attr">index-url</span> = https://mirrors.aliyun.com/pypi/simple</span><br></pre></td></tr></table></figure></li></ol><h3 id="sbt"><a href="#sbt" class="headerlink" title="sbt"></a>sbt</h3><ol><li><p>创建文件</p><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">touch ~<span class="regexp">/.sbt/</span><span class="keyword">repositories</span></span><br></pre></td></tr></table></figure></li><li><p>修改文件</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[repositories]</span><br><span class="line">local</span><br><span class="line">aliyun: https://maven.aliyun.com/repository/public</span><br><span class="line">typesafe: http://repo.typesafe.com/typesafe/ivy-releases/, [<span class="string">organization</span>]/[<span class="string">module</span>]/(scala<span class="emphasis">_[scalaVersion]/)(sbt_</span>[<span class="string">sbtVersion</span>]/)[<span class="string">revision</span>]/[<span class="string">type</span>]s/[<span class="string">artifact</span>](<span class="link">-[classifier]</span>).[ext], bootOnly</span><br><span class="line">sonatype-oss-releases</span><br><span class="line">maven-central</span><br><span class="line">sonatype-oss-snapshots</span><br></pre></td></tr></table></figure></li></ol><h3 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h3><p>淘宝镜像</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">config</span> <span class="built_in">set</span> registry https:<span class="comment">//registry.npm.taobao.org --global</span></span><br><span class="line">npm <span class="built_in">config</span> <span class="built_in">set</span> disturl https:<span class="comment">//npm.taobao.org/dist --global</span></span><br></pre></td></tr></table></figure><h3 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h3><p>淘宝镜像</p><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">yarn <span class="built_in">config</span> <span class="built_in">set</span> registry https:<span class="comment">//registry.npm.taobao.org/</span></span><br></pre></td></tr></table></figure><h3 id="ntp"><a href="#ntp" class="headerlink" title="ntp"></a>ntp</h3><p>阿里云</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ntp</span><span class="selector-class">.cloud</span><span class="selector-class">.aliyuncs</span><span class="selector-class">.com</span></span><br></pre></td></tr></table></figure><h3 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h3><p>清华大学镜像</p><ul><li><p>替换</p><ul><li><p>Homebrew(Mac)</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">mirrors.</span><span class="string">tuna.</span><span class="string">tsinghua.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">git/</span><span class="string">homebrew/</span><span class="string">brew.</span><span class="string">git</span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/core)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">mirrors.</span><span class="string">tuna.</span><span class="string">tsinghua.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">git/</span><span class="string">homebrew/</span><span class="string">homebrew-core.</span><span class="string">git</span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/cask)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">mirrors.</span><span class="string">tuna.</span><span class="string">tsinghua.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">git/</span><span class="string">homebrew/</span><span class="string">homebrew-cask.</span><span class="string">git</span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/cask-fonts)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">mirrors.</span><span class="string">tuna.</span><span class="string">tsinghua.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">git/</span><span class="string">homebrew/</span><span class="string">homebrew-cask-</span><span class="string">fonts.</span><span class="string">git</span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/cask-drivers)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">mirrors.</span><span class="string">tuna.</span><span class="string">tsinghua.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">git/</span><span class="string">homebrew/</span><span class="string">homebrew-cask-</span><span class="string">drivers.</span><span class="string">git</span></span><br></pre></td></tr></table></figure></li><li><p>Linuxbrew(Linux)</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">mirrors.</span><span class="string">tuna.</span><span class="string">tsinghua.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">git/</span><span class="string">homebrew/</span><span class="string">brew.</span><span class="string">git</span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/core)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">mirrors.</span><span class="string">tuna.</span><span class="string">tsinghua.</span><span class="string">edu.</span><span class="string">cn/</span><span class="string">git/</span><span class="string">homebrew/</span><span class="string">linuxbrew-core.</span><span class="string">git</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>更换后测试工作是否正常</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span>update</span><br></pre></td></tr></table></figure><ul><li><p>复原</p><ul><li><p>Homebrew(Mac)</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">github.</span><span class="string">com/</span><span class="string">Homebrew/</span><span class="string">brew.</span><span class="string">git</span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/core)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">github.</span><span class="string">com/</span><span class="string">Homebrew/</span><span class="string">homebrew-core.</span><span class="string">git</span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/cask)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">github.</span><span class="string">com/</span><span class="string">Homebrew/</span><span class="string">homebrew-cask.</span><span class="string">git</span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/cask-fonts)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">github.</span><span class="string">com/</span><span class="string">Homebrew/</span><span class="string">homebrew-cask-</span><span class="string">fonts.</span><span class="string">git</span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/cask-drivers)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">github.</span><span class="string">com/</span><span class="string">Homebrew/</span><span class="string">homebrew-cask-</span><span class="string">drivers.</span><span class="string">git</span></span><br></pre></td></tr></table></figure></li><li><p>Linuxbrew(Linux)</p><figure class="highlight dsconfig"><table><tr><td class="code"><pre><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">github.</span><span class="string">com/</span><span class="string">Homebrew/</span><span class="string">brew.</span><span class="string">git</span></span><br><span class="line"><span class="string">git </span>-C <span class="string">"$(brew --repo homebrew/core)"</span> <span class="string">remote </span><span class="built_in">set-url</span> <span class="string">origin </span><span class="string">https:</span>//<span class="string">github.</span><span class="string">com/</span><span class="string">Homebrew/</span><span class="string">linuxbrew-core.</span><span class="string">git</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p>更换后测试工作是否正常</p><figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">brew </span>update</span><br></pre></td></tr></table></figure><h3 id="flutter-sdk"><a href="#flutter-sdk" class="headerlink" title="flutter sdk"></a>flutter sdk</h3><p>原始链接:</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>storage.googleapis.com<span class="regexp">/flutter_infra/</span>releases<span class="regexp">/stable/m</span>acos<span class="regexp">/flutter_macos_v1.12.13+hotfix.9-stable.zip</span></span><br></pre></td></tr></table></figure><p>将<code>storage.googleapis.com</code>替换为<code>storage.flutter-io.cn</code> :</p><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>storage.flutter-io.cn<span class="regexp">/flutter_infra/</span>releases<span class="regexp">/stable/m</span>acos<span class="regexp">/flutter_macos_v1.12.13+hotfix.9-stable.zip</span></span><br></pre></td></tr></table></figure><h3 id="Flutter"><a href="#Flutter" class="headerlink" title="Flutter"></a>Flutter</h3><p><code>PUB_HOSTED_URL</code> : <code>Dart</code>依赖包<br><code>FLUTTER_STORAGE_BASE_URL</code>: <code>Flutter</code>依赖文件</p><ul><li><p>Flutter中文社区</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PUB_HOSTED_URL</span>=https://pub.flutter-io.cn</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">FLUTTER_STORAGE_BASE_URL</span>=https://storage.flutter-io.cn</span><br></pre></td></tr></table></figure></li><li><p>清华大学 TUNA 协会</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PUB_HOSTED_URL</span>=https://mirrors.tuna.tsinghua.edu.cn/dart-pub</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">FLUTTER_STORAGE_BASE_URL</span>=https://mirrors.tuna.tsinghua.edu.cn/flutter</span><br></pre></td></tr></table></figure></li><li><p>腾讯云</p><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="builtin-name">export</span> <span class="attribute">PUB_HOSTED_URL</span>=https://mirrors.cloud.tencent.com/dart-pub</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">FLUTTER_STORAGE_BASE_URL</span>=https://mirrors.cloud.tencent.com/flutter</span><br></pre></td></tr></table></figure></li></ul><h3 id="go"><a href="#go" class="headerlink" title="go"></a>go</h3><p>阿里云</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> env -<span class="keyword">w</span> GO111MODULE=<span class="keyword">on</span></span><br><span class="line"><span class="keyword">go</span> env -<span class="keyword">w</span> GOPROXY=http<span class="variable">s:</span>//mirrors.aliyun.<span class="keyword">com</span>/goproxy/</span><br></pre></td></tr></table></figure><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>docker中国镜像</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://hub-mirror.c.163.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ubuntu 20.04</li></ul><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p <span class="regexp">/etc/</span>docker</span><br><span class="line"></span><br><span class="line">sudo tee <span class="regexp">/etc/</span>docker/daemon.json &lt;&lt;-<span class="string">'EOF'</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"registry-mirrors"</span>: [</span><br><span class="line">    <span class="string">"https://hub-mirror.c.163.com"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line"></span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="Centos-8-Yum"><a href="#Centos-8-Yum" class="headerlink" title="Centos 8 Yum"></a>Centos 8 Yum</h3><p>阿里云</p><ol><li>备份旧的</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/yum.repos.d/</span><br><span class="line">mv /etc/yum.repos.d/CentOS-AppStream.repo /etc/yum.repos.d/CentOS-AppStream.repo.bak</span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line">mv /etc/yum.repos.d/CentOS-centosplus.repo /etc/yum.repos.d/CentOS-centosplus.repo.bak</span><br><span class="line">mv /etc/yum.repos.d/CentOS-Extras.repo /etc/yum.repos.d/CentOS-Extras.repo.bak</span><br><span class="line">mv /etc/yum.repos.d/CentOS-PowerTools.repo /etc/yum.repos.d/CentOS-PowerTools.repo.bak</span><br></pre></td></tr></table></figure><ol start="2"><li>下载新的</li></ol><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">wget -O <span class="regexp">/etc/yum</span>.repos.d<span class="regexp">/CentOS-Base.repo http:/</span><span class="regexp">/mirrors.aliyun.com/</span>repo<span class="regexp">/Centos-8.repo</span></span><br></pre></td></tr></table></figure><h3 id="Ubuntu-20-04"><a href="#Ubuntu-20-04" class="headerlink" title="Ubuntu 20.04"></a>Ubuntu 20.04</h3><p>阿里云</p><ol><li>备份</li></ol><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mv <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list /</span>etc<span class="regexp">/apt/</span>sources.list.bak</span><br></pre></td></tr></table></figure><ol start="2"><li><code>/etc/apt/sources.list</code>写入</li></ol><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-security main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-security main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-updates main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-proposed main restricted universe multiverse</span><br><span class="line">deb http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/ubuntu/</span> focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><ol start="3"><li>更新</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">sudo apt <span class="keyword">update</span> </span><br><span class="line">sudo apt <span class="keyword">upgrade</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;只是想让它快一点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Maven&quot;&gt;&lt;a href=&quot;#Maven&quot; class=&quot;headerlink&quot; title=&quot;Maven&quot;&gt;&lt;/a&gt;Maven&lt;/h3&gt;&lt;p&gt;阿里云仓库&lt;/p&gt;
&lt;figu
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="Flutter" scheme="https://di1shuai.com/tags/Flutter/"/>
    
      <category term="镜像" scheme="https://di1shuai.com/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="maven" scheme="https://di1shuai.com/tags/maven/"/>
    
      <category term="pip" scheme="https://di1shuai.com/tags/pip/"/>
    
      <category term="npm" scheme="https://di1shuai.com/tags/npm/"/>
    
      <category term="yarn" scheme="https://di1shuai.com/tags/yarn/"/>
    
      <category term="ntp" scheme="https://di1shuai.com/tags/ntp/"/>
    
      <category term="brew" scheme="https://di1shuai.com/tags/brew/"/>
    
      <category term="go" scheme="https://di1shuai.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>tensorflow实践：梦幻西游人物弹窗识别（五）</title>
    <link href="https://di1shuai.com/tensorflow%E5%AE%9E%E8%B7%B5%EF%BC%9A%E6%A2%A6%E5%B9%BB%E8%A5%BF%E6%B8%B8%E4%BA%BA%E7%89%A9%E5%BC%B9%E7%AA%97%E8%AF%86%E5%88%AB%EF%BC%88%E4%BA%94%EF%BC%89.html"/>
    <id>https://di1shuai.com/tensorflow%E5%AE%9E%E8%B7%B5%EF%BC%9A%E6%A2%A6%E5%B9%BB%E8%A5%BF%E6%B8%B8%E4%BA%BA%E7%89%A9%E5%BC%B9%E7%AA%97%E8%AF%86%E5%88%AB%EF%BC%88%E4%BA%94%EF%BC%89.html</id>
    <published>2020-03-21T17:53:50.000Z</published>
    <updated>2021-04-03T23:26:31.479Z</updated>
    
    <content type="html"><![CDATA[<p>为什么么说我们的目标是<strong>基本</strong>完成呢？<br>因为它不会<strong>进化</strong>呀！</p><p><img src="http://images.di1shuai.com/FltgSUT4XbTNajlHvvq4FRgtNHad" alt></p><p>如果我们拥有<strong>全量</strong>的梦幻西游人物<strong>图库</strong>，那自然预测的准确率很高<br>很可惜，我们<strong>没有</strong><br>所以只能在日常的跑镖或者打怪中去不断的<strong>积累</strong>图库，让神经网络不断的训练<strong>学习</strong>，以将<strong>准确率</strong>提<strong>高</strong></p><h3 id="预分类"><a href="#预分类" class="headerlink" title="预分类"></a>预分类</h3><p>于是我们按照预测的索引，将图片<strong>分类</strong>并保存，值得注意的是这里的分类并<strong>不</strong>一定<strong>准确</strong>，所以是<strong>预分类</strong></p><p><code>screen.py</code></p><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="meta">###  数据保存</span></span><br><span class="line">def save_data_img(front_index):<span class="type"></span></span><br><span class="line"><span class="type">    for i in range</span>(len(c.crop_4_img_paths)):<span class="type"></span></span><br><span class="line"><span class="type">        save_path </span>= <span class="string">''</span></span><br><span class="line">        <span class="keyword">if</span> i == front_index:<span class="type"></span></span><br><span class="line"><span class="type">            save_path </span>= os.path.join(c.<span class="keyword">new</span><span class="type">_front_img_dir</span>,time_str()+<span class="string">'_'</span>+str(i)+<span class="string">'.jpg'</span>)</span><br><span class="line">        <span class="keyword">else</span>:<span class="type"></span></span><br><span class="line"><span class="type">            save_path </span>= os.path.join(c.<span class="keyword">new</span><span class="type">_others_img_dir</span>,time_str()+<span class="string">'_'</span>+str(i)+<span class="string">'.jpg'</span>)</span><br><span class="line">        shutil.copyfile(c.crop_4_img_paths[i],save_path)</span><br></pre></td></tr></table></figure><p><code>main.py</code>在获得预测索引时保存数据</p><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">min_index = dm.model_predict(c.crop_4_img_paths)</span><br><span class="line">sc.save_dat<span class="built_in">a_img</span>(min_index)</span><br><span class="line"><span class="built_in">target_x ,</span> target_y = sc.find_xy_indesktop(c.crop_4_img_paths[min_index])</span><br></pre></td></tr></table></figure><p>路径如下</p><figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">images</span><br><span class="line">  <span class="string">|- data</span></span><br><span class="line">      <span class="string">|- new</span></span><br><span class="line">          <span class="string">|- front</span></span><br><span class="line">               <span class="string">|- xxx.jpg</span></span><br><span class="line">               <span class="string">|- ...</span></span><br><span class="line">          <span class="string">|- others  </span></span><br><span class="line">               <span class="string">|- xxx.jpg</span></span><br><span class="line">               <span class="string">|- ...</span></span><br></pre></td></tr></table></figure><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>不得不说这一步是<strong>手工</strong>确认，去两个文件夹下确认是否都是正确的，不正确的手工移动到正确目录下<br>于是加入两个<strong>输入确认</strong>以<strong>提醒</strong>不要忘记，等训练<strong>样本</strong>比较<strong>齐全</strong>以后可以改为<strong>自动</strong>分类</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">util.log_title(<span class="string">'图片朝向确认'</span>)</span><br><span class="line"><span class="keyword">confirm</span> = <span class="built_in">input</span>(<span class="keyword">f</span><span class="string">'请确认路径  &#123;os.path.abspath(c.new_front_img_dir)&#125;   下图片朝向均为  &gt; 前 &lt;  : (确认后输入 Y , 输入其他退出) '</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">confirm</span> == <span class="string">'Y'</span> <span class="built_in">or</span> <span class="keyword">confirm</span> == <span class="string">'y'</span>:</span><br><span class="line">    <span class="keyword">confirm</span> = <span class="built_in">input</span>(<span class="keyword">f</span><span class="string">'请确认路径  &#123;os.path.abspath(c.new_others_img_dir)&#125;   下图片朝向均为  &gt; 左 右 后 &lt; : (确认后输入 Y , 输入其他退出)'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">confirm</span> == <span class="string">'Y'</span> <span class="built_in">or</span> <span class="keyword">confirm</span> == <span class="string">'y'</span>:</span><br></pre></td></tr></table></figure><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">2020-03-21 19:12:12.623765: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cudart64_101.dll</span><br><span class="line"></span><br><span class="line">--------   图片朝向确认    ----------</span><br><span class="line"></span><br><span class="line">请确认路径  D:<span class="symbol">\g</span>itRepo<span class="symbol">\m</span>hxy<span class="symbol">\i</span>mages<span class="symbol">\d</span>ata<span class="symbol">\n</span>ew<span class="symbol">\f</span>ront   下图片朝向均为  &gt; 前 &lt;  : (确认后输入 Y , 输入其他退出) Y</span><br><span class="line">请确认路径  D:<span class="symbol">\g</span>itRepo<span class="symbol">\m</span>hxy<span class="symbol">\i</span>mages<span class="symbol">\d</span>ata<span class="symbol">\n</span>ew<span class="symbol">\o</span>thers   下图片朝向均为  &gt; 左 右 后 &lt; : (确认后输入 Y , 输入其他退出)</span><br></pre></td></tr></table></figure><h3 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h3><p>分类确认后，就可以将<code>new</code>目录下图片移动到训练集<code>train</code>目录中了<br><code>main.py</code></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">sc</span><span class="selector-class">.move_new_to_train</span>()</span><br></pre></td></tr></table></figure><p><code>screen.py</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_new_to_train</span><span class="params">()</span>:</span></span><br><span class="line">    move_file(c.new_front_img_dir,c.front_img_dir)</span><br><span class="line">    move_file(c.new_others_img_dir,c.others_img_dir)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">move_file</span><span class="params">(src_path,target_path)</span>:</span></span><br><span class="line">    file_list=os.listdir(src_path)</span><br><span class="line">    <span class="keyword">if</span> len(file_list)&gt;<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> file_list:</span><br><span class="line">            shutil.move(</span><br><span class="line">                os.path.join(src_path,file),</span><br><span class="line">                os.path.join(target_path,file)</span><br><span class="line">                )   </span><br><span class="line">    print(<span class="string">f'<span class="subst">&#123;src_path&#125;</span> -&gt; <span class="subst">&#123;target_path&#125;</span> 完毕'</span>)</span><br></pre></td></tr></table></figure><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><p><code>main.py</code></p><figure class="highlight cs"><table><tr><td class="code"><pre><span class="line">dm.<span class="keyword">base</span>()</span><br></pre></td></tr></table></figure><p><code>data_model.py</code></p><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">def</span> <span class="selector-tag">base</span>():</span><br><span class="line">    <span class="selector-tag">if</span> <span class="selector-tag">count</span>():</span><br><span class="line">        <span class="selector-tag">data_generator</span>()</span><br><span class="line">        <span class="selector-tag">model_summary</span>()</span><br><span class="line">        <span class="selector-tag">model_fit</span>()</span><br><span class="line">        <span class="selector-tag">model_save</span>()</span><br><span class="line">        <span class="selector-tag">return</span> <span class="selector-tag">True</span></span><br></pre></td></tr></table></figure><h3 id="组合"><a href="#组合" class="headerlink" title="组合"></a>组合</h3><p>将之前的步骤组合后<br><code>main.py</code></p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">###  将新图加入训练集 并 训练模型</span><br><span class="line">def move_learn():</span><br><span class="line">    util.log_title(<span class="string">'图片朝向确认'</span>)</span><br><span class="line">    <span class="keyword">confirm</span> = <span class="built_in">input</span>(<span class="keyword">f</span><span class="string">'请确认路径  &#123;os.path.abspath(c.new_front_img_dir)&#125;   下图片朝向均为  &gt; 前 &lt;  : (确认后输入 Y , 输入其他退出) '</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">confirm</span> == <span class="string">'Y'</span> <span class="built_in">or</span> <span class="keyword">confirm</span> == <span class="string">'y'</span>:</span><br><span class="line">        <span class="keyword">confirm</span> = <span class="built_in">input</span>(<span class="keyword">f</span><span class="string">'请确认路径  &#123;os.path.abspath(c.new_others_img_dir)&#125;   下图片朝向均为  &gt; 左 右 后 &lt; : (确认后输入 Y , 输入其他退出)'</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">confirm</span> == <span class="string">'Y'</span> <span class="built_in">or</span> <span class="keyword">confirm</span> == <span class="string">'y'</span>:</span><br><span class="line">            util.log_h1_start(<span class="string">'开始'</span>)</span><br><span class="line">            sc.move_new_to_train()</span><br><span class="line">            dm.base()               </span><br><span class="line">    util.log_h1_end(<span class="string">'结束'</span>)</span><br></pre></td></tr></table></figure><p><img src="http://images.di1shuai.com/FncBRUv0JAJOZVvE2Bpbk79arRRU" alt></p><p>这样的话，每天打完以后，都可以用新的素材让自己变帅一点，哈哈哈哈哈哈</p><hr><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>再来看看我们都经历了什么<br><img src="http://images.di1shuai.com/FuOdQlJmiTzQMbbtZ4vXOraJL6Fp" alt><br>成就感满满!!</p><hr><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>本人无任何商业目的，仅用于学习和娱乐，<a href="https://github.com/BestBurning/mhxy" target="_blank" rel="noopener">源代码</a>采用了<a href="https://opensource.org/licenses/AGPL-3.0" target="_blank" rel="noopener">AGPL3.0</a>开源协议</p><p>本文为博主原创文章，任何人未经过博主同意不得转载</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为什么么说我们的目标是&lt;strong&gt;基本&lt;/strong&gt;完成呢？&lt;br&gt;因为它不会&lt;strong&gt;进化&lt;/strong&gt;呀！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://images.di1shuai.com/FltgSUT4XbTNajlHvvq4FRgtNHad
      
    
    </summary>
    
    
      <category term="technology" scheme="https://di1shuai.com/categories/technology/"/>
    
    
      <category term="Windows" scheme="https://di1shuai.com/tags/Windows/"/>
    
      <category term="tensorflow" scheme="https://di1shuai.com/tags/tensorflow/"/>
    
      <category term="梦幻西游" scheme="https://di1shuai.com/tags/%E6%A2%A6%E5%B9%BB%E8%A5%BF%E6%B8%B8/"/>
    
  </entry>
  
</feed>
